bar_plot_ps_ra <- plot_sample_bars(physeq = physeq, x = "Sample", y = "Abundance", group_var = "race.location", color_levels = color_race.location, fill = "Genus", color_sample_names = FALSE, col_vec = NULL, facet_grid = NULL, order_by_firmicutes = FALSE)
bar_plot_ps_ra
# - calculate the jsd distance between all samples -
phy.dist = phyloseq::distance(physeq, method="jsd")
# -- proof that the distances are the same in case of jsd for relative abundances --
# physeq_ra <- phyloseq::transform_sample_counts(physeq, function(x){x/sum(x)})
# phy.dist_ra = phyloseq::distance(physeq_ra, method="jsd")
# all.equal(phy.dist, phy.dist_ra) # TRUE
# ----
# --
# - illustrate the between and within group distances similar to meandist of vegan -
group_var <- "race.location"
Tr_dist_simple <- compare_beta_div_distances_simple(dist = phy.dist, physeq = physeq, group_var = group_var, jitter_up_to = 100, ggpubr = FALSE)
Tr_dist_int <- compare_beta_div_distances_intermediate(dist = phy.dist, physeq = physeq, group_var = group_var, jitter_up_to = 100, ggpubr = FALSE)
# --
# -- do your own PCOa --
ordination_type = "PCoA"
ordination <- phyloseq::ordinate(physeq, method = ordination_type, distance = phy.dist)
eigvec <- phyloseq:::extract_eigenvalue.pcoa(ordination)
axes <- 1:2
fracvar = eigvec[axes]/sum(eigvec)
percvar = round(100 * fracvar, 1)
ellipse_level = 0.95
DF_beta <- phyloseq::plot_ordination(physeq, ordination, justDF = TRUE)
Tr <- ggplot(DF_beta, aes(x = Axis.1, y = Axis.2))
Tr <- Tr +
#stat_ellipse(geom = "polygon", aes_string(fill = group_var), type = "t", alpha = 0.15, level = ellipse_level) +
#stat_ellipse(aes_string(col = group_var), type = "t", linetype = "dashed", level = ellipse_level) +
#geom_point(col = cbPalette[1], size = 0.75, alpha = 0.5) +
geom_point(aes_string(col = group_var), size = 1.5) +
scale_color_manual("", values = color_race.location) +
#scale_fill_manual("", values = color_race.location) +
theme_bw() +
ggtitle("jsd own PCOA")
strivar = as(c(Tr$label$x, Tr$label$y), "character")
strivar = paste0(strivar, " (", percvar, " %)")
Tr <- Tr + xlab(strivar[1]) + ylab(strivar[2])
# ----
Tr
Tr_dist_simple
Tr_dist_int
# - he first performs a principal coordinate analysis -
phy.pco = dudi.pco(phy.dist, scannf=FALSE, nf=3) # from ade4 package
# - calculate the mean within and between group distances -
# race.location = with(sample_data(physeq), interaction(race, location))
race.location <- sample_data(physeq)[["race.location"]]
meandist(phy.dist, race.location)
diag(meandist(phy.dist, race.location))
Tr_them <- s.class(phy.pco$li, race.location, cellipse = 0,
col = color_race.location)
grid.arrange(Tr, eval(Tr_them), ncol = 2)
library(gridExtra)
grid.arrange(Tr, eval(Tr_them), ncol = 2)
Tr
eval(Tr_them)
# - do the adonis overall and pairwise -
group_fac <- SD$race.location
adonisRes <- loop_vegan_adonis(dist_obj = phy.dist, group_fac = group_fac, nperm = 99999)
adonisRes
adonis(phy.dist~race.location, permutations=99999)
AdResult <- adonis(phy.dist~race.location, permutations=99999)
AdResult
tidy(AdResult)
library(tidyverse)
tidy(AdResult)
?tidy
generics::tidy(AdResult)
summary(AdResult)
coefficients(AdResult)
AdResult$aov.tab
AdResult$aov.tab[1,]
WdS.test(phy.dist, race.location, nrep = 99999)
WdSResult <- WdS.test(phy.dist, race.location, nrep = 99999)
class(WdSResult)
unlist(WdSResult)
data.frame(WdSResult)
SD
race <- sample_data(physeq)[["race"]]
race
color_race
Tr_them <- s.class(phy.pco$li, race, cellipse = 0,
col = color_race)
Tr_them <- s.class(phy.pco$li, race, cellipse = 2,
col = color_race)
Tr_them <- s.class(phy.pco$li, race, cellipse = 1,
col = color_race)
Tr_them <- s.class(phy.pco$li, race, cellipse = 0,
col = color_race)
AdResult <- adonis(phy.dist~race, permutations=99999)
AdResult$aov.tab[1,]
WdSResult <- WdS.test(phy.dist, race, nrep = 99999)
data.frame(WdSResult)
SD$location
color_location <- QuantColors15[1:2]
names(color_location) <- c("DIST", "PROX")
location <- sample_data(physeq)[["location"]]
Tr_them <- s.class(phy.pco$li, location, cellipse = 0,
col = color_race)
AdResult <- adonis(phy.dist~location, permutations=99999)
WdSResult <- WdS.test(phy.dist, location, nrep = 99999)
AdResult$aov.tab[1,]
data.frame(WdSResult)
AdResult <- adonis(phy.dist~race.location, permutations=99999)
WdSResult <- WdS.test(phy.dist, race.location, nrep = 99999)
AdResult_r <- adonis(phy.dist~race, permutations=99999)
WdSResult_r <- WdS.test(phy.dist, race, nrep = 99999)
data.frame(WdSResult_r)
location <- sample_data(physeq)[["location"]]
AdResult_l <- adonis(phy.dist~location, permutations=99999)
WdSResult_l <- WdS.test(phy.dist, location, nrep = 99999)
AdResult
AdResult$aov.tab[1,]
AdResult$aov.tab[1,6]
WdSResult[[1]]
Table2 <- data.frame(Type = c("race.location", "race", "location"), adonis_p = c(AdResult$aov.tab[1,6], AdResult_r$aov.tab[1,6], AdResult_l$aov.tab[1,6]), WdStar_p = c(WdSResult[[1]], WdSResult_r[[1]], WdSResult_r[[1]]))
Table2
Table2 <- data.frame(Type = c("race.location", "race", "location"), adonis_p = c(AdResult$aov.tab[1,6], AdResult_r$aov.tab[1,6], AdResult_l$aov.tab[1,6]), WdStar_p = c(WdSResult[[1]], WdSResult_r[[1]], WdSResult_l[[1]]))
Table2
Table2 <- data.frame(Type = c("race", "location", "race.location"), adonis_p = c(AdResult_r$aov.tab[1,6], AdResult_l$aov.tab[1,6], AdResult$aov.tab[1,6]), WdStar_p = c(WdSResult_r[[1]], WdSResult_l[[1]], WdSResult[[1]]))
Table2
adonisRes
with(sample_data(physeq), table(race, location))
Tw2.posthoc.tests(phy.dist, race.location, nrep=999)
WdSResult_l
Tw2Pairs <- Tw2.posthoc.tests(phy.dist, race.location, nrep=999)
adonisRes
Tw2Pairs
Comparison <- cbind(adonisRes[-1,1:3], Tw2Pairs)
Comparison
Comparison$pRatio <- Comparison$adonis_pval/Comparison$p.value
Comparison$adonis_pval
Comparison$p.value
Comparison$pRatio <- Comparison$adonis_pval/as.numeric(Comparison$p.value)
Comparison$pRatio
Comparison
Tw2Rest <- Tw2.posthoc.1vsAll.tests(phy.dist, race.location, nrep = 999)
Tw2Rest
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(shiny); runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
rm(list = ls())
rm(list = ls())
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner")
library(shiny); runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
?timeInput
?shiny::timeInput
?dateInput
shinyTimeExample()
library(shinyTime)
install.packages("shinyTime")
library(shinyTime)
?inputTime
shinyTimeExample()
shinyTimeExample()
paste(strftime(now(), "%H", tz = "CET")
)
strptime("12:34:56", "%T")
strptime(now(), "%T")
now()
?timeInput
class(now())
class(strptime("12:34"))
class(strptime("12:34"), "%T")
class(strptime("12:34", "%T"))
runApp('app_Planner.R')
runApp('app_Planner.R')
value <- strptime("12:34:56", "%T")
value
strptime(now(), "%T")
strptime(as.character(now()), "%T")
paste(strftime(now(), "%H", tz = "CET"), ":", strftime(now(), "%M", tz = "CET")
)
paste(strftime(now(), "%H", tz = "CET"), ":", strftime(now(), "%M", tz = "CET"), sep = "")
?strftime
now()
class(now)
class(now())
now()
?now
now(tzone = "CET")
here()
as.character(now())
strftime(now(tzone = "CET"), "%HM")
strftime(now(tzone = "CET"), "%H%M")
strftime(now(tzone = "CET"), "%H:%M")
class(strftime(now(tzone = "CET"), "%H:%M"))
runApp('app_Planner.R')
rm(list = ls())
strptime(strftime(now(tzone = "CET"), "%H:%M"), "%T")
strftime(now(tzone = "CET"), "%H:%M")
class(strftime(now(tzone = "CET"), "%H:%M"))
strftime(now(tzone = "CET"), "%H:%M:%S")
strptime(strftime(now(tzone = "CET"), "%H:%M:%S"), "%T")
runApp('app_Planner.R')
strptime(strftime(now(tzone = "CET"), "%H:%M:%S"), "%T")
?timeInput
Sys.time()
runApp('app_Planner.R')
runApp('app_Planner.R')
Sys.time()
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
shinyTimeExample()
library(lubridate)
library(tidyverse)
library(gridExtra)
datapath <- "/Users/jvb740/Documents/Iben/Overstimulering"
df <- read.csv2(file = file.path(datapath, "Overstimulering.csv"), header = T)
df$Date <- lubridate::parse_date_time(as.character(df$Date), orders = "dmy")
df$Measure <- factor(df$Measure, levels = df$Measure[1:19], ordered = TRUE)
Lower <- c(0.35, 7.3, 3.5, 145, 36, 60, 3.5, 50, 137, NA, 5.3, NA, 10, 15, 35, 105, NA, NA, 64)
Upper <- c(0.46, 9.5, 8.8, 390, 48, NA, 4.4, 90, 144, .5, 10.3, 1.2, 45, 35, 105, 205, 3, 10, 79)
TrList <- list()
for (i in 1:19){
measure <- as.character(df$Measure)[i]
df_plot <- dplyr::filter(df, Measure == measure)
Tr <- ggplot(df_plot, aes(x = Date, y = Value))
Tr <- Tr +
geom_hline(yintercept = Lower[i], lty = 4, col = "red", size = 2) +
geom_hline(yintercept = Upper[i], lty = 4, col = "orange", size = 2) +
geom_line() +
geom_point(size = 3) +
ggtitle(measure) +
xlab("") +
theme_bw()
TrList[[i]] <- Tr
}
do.call("grid.arrange", c(TrList, ncol = 5))
rm(list = ls())
getwd()
shinyTimeExample()
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('app_Planner.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
Sys.time()
?Sys.time
now()
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
?now
now()
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
Sys.timezone()
as.POSIXct(Sys.time())
as.POSIXct(now())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
now(tzone = "UTC")
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
as.POSIXct("12:01")
as.POSIXct(Sys.Date())
as.POSIXct(Sys.time())
as.POSIXct(Sys.time(tz = "Europe/Copenhagen"))
Sys.timezone()
as.POSIXct(Sys.time(tz = "Europe/Copenhagen"))
format(Sys.time(), tz="America/Los_Angeles",usetz=TRUE)
format(Sys.time(), tz="Europe/Copenhagen",usetz=TRUE)
class(format(Sys.time(), tz="Europe/Copenhagen",usetz=TRUE))
?format
Sys.time()
Sys.time(tz = "Europe/Copenhagen")
Sys.time(tz = "Europe/Copenhagen", usetz = TRUE)
format(Sys.time(), tz="Europe/Copenhagen",usetz=TRUE)
as.POSIXct(format(Sys.time(), tz="Europe/Copenhagen",usetz=TRUE))
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
format(Sys.time(), tz="Europe/Copenhagen",usetz=TRUE)
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('app_Planner.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
?strftime
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
runApp('app_Planner.R')
rm(list = ls())
runApp('app_Planner.R')
rm(list = ls())
?NS
getwd()
dir()
dir()
runApp('app_Planner.R')
rm(list = ls())
?timeInput
dir()
rm(list = ls())
rm(list = ls())
rm(list = ls())
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar")
runApp('app_Calendar.R')
runApp('app_Calendar.R')
dir()
runApp('app_Calendar.R')
rm(list = ls())
runApp('app_Calendar.R')
rm(list = ls())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner/app_Planner.R')
getwd()
runApp('app_Calendar.R')
rm(list = ls())
strftime("12:00", "%H", tz = "CET")
dir()
Faelles <- readRDS("Faelles.rds")
str(Faelles)
Faelles$startTime[1]
class(Faelles$startTime[1])
class(now(tzone = "CET"))
Faelles
No = 23
Event <- Faelles[No,]
Event
Event$startTime
class(Event$startTime)
?updateTimeInput
Event$endTime[1]
rm(list = ls())
runApp('app_Calendar.R')
rm(list = ls())
runApp('app_Calendar.R')
rm(list = ls())
runApp('app_Calendar.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
rm(list = ls())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/ShinyTime/app_ST.R')
rm(list = ls())
runApp('app_Calendar.R')
getwd()
dir()
rm(list = ls())
runApp('app_Calendar.R')
rm(list = ls())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner/app_Planner.R')
rm(list = ls())
rm(list = ls())
rm(list = ls())
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar")
rm(list = ls())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner/app_Planner.R')
rm(list =  ls())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner/app_Planner.R')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner/app_Planner.R')
rm(list = ls())
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Teaching_Apps/MicrobiomeX4_App')
runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Teaching_Apps/MicrobiomeX4_App')
getwd()
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner")
rm(list = ls())
colorValues <- c(Deep = "#FF7F50", Work = cbPalette[1], Learn_Create = QuantColors15[3], Learn_Create_Deep = "#5DC863FF",
Sport = "red", Relax = QuantColors15[4], Mad = "#7F00FF", Household = "#FDE725FF", TV = "#21908CFF", FreeTime = "#440154FF", Social = "#3B528BFF", background = "lightgray") # "#006633"
# Set the colors!:
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
tol15rainbow=c("#114477", "#4477AA", "#77AADD", "#117755", "#44AA88", "#99CCBB", "#777711", "#AAAA44", "#DDDD77", "#771111", "#AA4444", "#DD7777", "#771144", "#AA4477", "#DD77AA") # ref: https://tradeblotter.wordpress.com/2013/02/28/the-paul-tol-21-color-salute/
QuantColors15 <- tol15rainbow[c(1, 12, 4, 7, 13, 2, 11, 5, 8, 14, 3, 10, 6, 9, 15)]
colorLevels <- c("Deep", "Work", "Learn_Create", "Sport", "Relax", "Household", "TV", "Social")
colorValues <- c(Deep = "#FF7F50", Work = cbPalette[1], Learn_Create = QuantColors15[3], Learn_Create_Deep = "#5DC863FF",
Sport = "red", Relax = QuantColors15[4], Mad = "#7F00FF", Household = "#FDE725FF", TV = "#21908CFF", FreeTime = "#440154FF", Social = "#3B528BFF", background = "lightgray") # "#006633"
# - make a ggplot version of pal -
pal_ggplot <- function(col){
col <- unname(col) # the naming could cause trouble if NA somehow
n <- length(col)
df <- data.frame(xstart = 0:(n-1)/n, xend = 1:n/n, ystart = 0, yend = 1, Fill = col)
df$Fill <- factor(df$Fill, levels = col, ordered = T)
Tr <- ggplot(df)
Tr <- Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col) +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid = element_blank())
Tr
}
pal_ggplot(colorValues)
colorLevels <- c("Deep", "Work", "Learn_Create", "Sport_Motion", "Meditation", "TV", "Social", "Household")
colorLevels
colorValues <- c("Other" = cbPalette[1], Deep = "red", Work = cbPalette[1], Learn_Create = "#5DC863FF",
Sport = "#FF7F50", Relax = QuantColors15[4], Mad = "#7F00FF", Household = "#FDE725FF", TV = "#21908CFF", FreeTime = "#440154FF", Social = "#3B528BFF") # "#006633"
pal_ggplot(colorValues)
colorValues
colorValues <- c("Other" = cbPalette[1], Deep = "red", Work = "#440154FF", Learn_Create = "#5DC863FF",
Sport = "#FF7F50", Relax = QuantColors15[4], Mad = "#7F00FF", Household = "#FDE725FF", TV = "#21908CFF", , Social = "#3B528BFF") # "#006633"
colorValues <- c(Other = cbPalette[1], Deep = "red", Work = "#440154FF", Learn_Create = "#5DC863FF",
Sport_Motion = "#FF7F50", Meditation = QuantColors15[4], Mad = "#7F00FF", Household = "#FDE725FF", TV = "#21908CFF", Social = "#3B528BFF") # "#006633"
pal_ggplot(colorValues)
pal_ggplot(viridis(5))
colorValues <- c(Other = cbPalette[1], Deep = "red", Work = "#440154FF", Learn_Create = "#5DC863FF",
Sport_Motion = "#7F00FF", Meditation = QuantColors15[4], Household = "#FDE725FF", TV = "#21908CFF", Social = "#3B528BFF") # "#006633"
pal_ggplot(colorValues)
colorValues <- c(Other = cbPalette[1], Deep = "red", Work = "#440154FF", Learn_Create = "#5DC863FF",
Sport_Motion = "#7F00FF", Meditation = QuantColors15[4], TV = "#FDE725FF", Social = "#FF7F50", Household = "#21908CFF") # "#006633"
pal_ggplot(colorValues)
colorValues
rm(list = ls())
# - load functions -
source("plannerFunctions.R")
colorLevels
runApp('app_Planner.R')
runApp('app_Planner.R')
rm(list = ls())
source('~/Documents/Iben/Overstimulering/OverstimuleringAnalyse.R', echo=TRUE)
rm(list = ls())
getwd()
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar")
# - load functions -
source("calendarFunctions.R")
colorLevels
rm(list = ls())
runApp('app_Calendar.R')
# - load functions -
source("calendarFunctions.R")
# - make a ggplot version of pal -
pal_ggplot <- function(col){
col <- unname(col) # the naming could cause trouble if NA somehow
n <- length(col)
df <- data.frame(xstart = 0:(n-1)/n, xend = 1:n/n, ystart = 0, yend = 1, Fill = col)
df$Fill <- factor(df$Fill, levels = col, ordered = T)
Tr <- ggplot(df)
Tr <- Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col) +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid = element_blank())
Tr
}
# --
pal_ggplot(colorValues)
colorValues[4] <- colorValues[1]
colorValues
col <- colorValues
col <- unname(col) # the naming could cause trouble if NA somehow
col
n <- length(col)
df <- data.frame(xstart = 0:(n-1)/n, xend = 1:n/n, ystart = 0, yend = 1, Fill = col)
df
Tr <- ggplot(df)
Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill))
Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col)
df
col
col1 <- col
col[2] <- col1[3]
col[3] <- col1[2]
col
col <- unname(col) # the naming could cause trouble if NA somehow
n <- length(col)
df <- data.frame(xstart = 0:(n-1)/n, xend = 1:n/n, ystart = 0, yend = 1, Fill = col)
Tr <- ggplot(df)
Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col)
col
pal <- function(col, border = "light gray", ...){
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "", ...)
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(col = col)
Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col)
?geom_rect
col
pal(col)
col <- unname(col) # the naming could cause trouble if NA somehow
n <- length(col)
df <- data.frame(xstart = 0:(n-1)/n, xend = 1:n/n, ystart = 0, yend = 1, Fill = as.character(1:n))
df
Tr <- ggplot(df)
Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col)
Tr <- ggplot(df)
Tr <- Tr +
geom_rect(aes(xmin = xstart, xmax = xend, ymin = ystart, ymax = yend, fill = Fill)) +
scale_fill_manual(values = col) +
theme_minimal() +
theme(legend.position = "none",
axis.text = element_blank(),
panel.grid = element_blank())
Tr
rm(list = ls())
getwd()
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Planner")
rm(list = ls())
runApp('app_Planner.R')
