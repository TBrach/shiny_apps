})
c_sample_picture <- sample_pictures[[1]]
#- subtract background -
c_sample_picture <- c_sample_picture - min(c_sample_picture)
plot(rowMeans(c_sample_picture))
x <- rowMeans(c_sample_picture)
x
c_sample_picture <- sample_pictures[[1]]
#- subtract background -
c_sample_picture <- c_sample_picture - min(c_sample_picture)
plot(rowMeans(c_sample_picture))
dim(c_sample_picture)
min(c_sample_picture)
sample_pictures <- lapply(1:nrow(split_df), function(cc_row){
row_picture[,split_df$start_column[cc_row]:split_df$column[cc_row]]
})
c_sample_picture <- sample_pictures[[1]]
View(c_sample_picture)
install.packages("png")
install.packages("png")
library(tidyverse)
#library(magick)
library(png)
#gel_pic <- image_read("~/Desktop/testi.jpeg")
#gel_pic <- image_read("~/Desktop/testi.tif")
gel_png <- readPNG("~/Desktop/testi.png")
top_left_row <- c(372, 654)
top_left_column <- 81
width <- 1143
height <- 117
n_samples <- c(8, 4)
# - turn picture into 8 bit -
gel_png <- gel_png*255
# --
# - turn input into dataframe so each row is one row picture to analyse -
input_list <- list(top_left_row, top_left_column, width, height, n_samples)
names(input_list) <- c("row", "column", "width", "height", "n_samples")
input_lengths <- sapply(input_list, length)
max_length <- max(input_lengths)
if (any(!input_lengths %in% c(1, max_length))){stop("all inputs must be of lengths 1 or lengths = number of rows")}
if (max_length > 1 && any(input_lengths == 1)){
input_list[input_lengths == 1] <- lapply(input_list[input_lengths == 1], function(c_entry){
rep(c_entry, max_length)
})
}
input_df <- bind_cols(input_list)
# - if done with imageJ, which it should, add the 1 :) -
input_df$row <- input_df$row + 1
input_df$column <- input_df$column + 1
message(paste("We will analyse", nrow(input_df), "gel rows."))
res_list <- lapply(1:nrow(input_df), function(c_input_row){
c_top_left_row <- input_df$row[c_input_row]
c_top_left_column <- input_df$column[c_input_row]
c_width <- input_df$width[c_input_row]
c_height <- input_df$height[c_input_row]
c_n_samples <- input_df$n_samples[c_input_row]
row_picture <- gel_png[c_top_left_row:(c_top_left_row + c_height -1), c_top_left_column:(c_top_left_column + c_width - 1)]
# - split into samples -
c_sample_width <- floor(c_width/c_n_samples) # you might lose here up to 1 pixel
split_columns <- cumsum(rep(c_sample_width, c_n_samples))
split_df <- data.frame(start_column = split_columns-(c_sample_width -1), column = split_columns)
sample_pictures <- lapply(1:nrow(split_df), function(cc_row){
row_picture[,split_df$start_column[cc_row]:split_df$column[cc_row]]
})
tt <- do.call("cbind", sample_pictures)
lapply(sample_pictures, function(c_sample_picture){
#- subtract background -
c_sample_picture <- c_sample_picture - min(c_sample_picture)
plot(rowMeans(c_sample_picture))
})
# --
})
library(tidyverse)
#library(magick)
library(png)
#gel_pic <- image_read("~/Desktop/testi.jpeg")
#gel_pic <- image_read("~/Desktop/testi.tif")
gel_png <- readPNG("~/Desktop/testi.png")
# gel_pic_raster <- as.raster(gel_pic, max = 255L)
# tt <- as.matrix(gel_pic_raster)
# - try to plot the first column -
top_left_row <- c(372, 654)
top_left_column <- 81
width <- 1143
height <- 117
n_samples <- c(8, 4)
# - turn picture into 8 bit -
gel_png <- gel_png*255
# --
# - turn input into dataframe so each row is one row picture to analyse -
input_list <- list(top_left_row, top_left_column, width, height, n_samples)
names(input_list) <- c("row", "column", "width", "height", "n_samples")
input_lengths <- sapply(input_list, length)
max_length <- max(input_lengths)
if (any(!input_lengths %in% c(1, max_length))){stop("all inputs must be of lengths 1 or lengths = number of rows")}
if (max_length > 1 && any(input_lengths == 1)){
input_list[input_lengths == 1] <- lapply(input_list[input_lengths == 1], function(c_entry){
rep(c_entry, max_length)
})
}
input_df <- bind_cols(input_list)
# - if done with imageJ, which it should, add the 1 :) -
input_df$row <- input_df$row + 1
input_df$column <- input_df$column + 1
message(paste("We will analyse", nrow(input_df), "gel rows."))
c_input_row <- 1
c_top_left_row <- input_df$row[c_input_row]
c_top_left_column <- input_df$column[c_input_row]
c_width <- input_df$width[c_input_row]
c_height <- input_df$height[c_input_row]
c_n_samples <- input_df$n_samples[c_input_row]
row_picture <- gel_png[c_top_left_row:(c_top_left_row + c_height -1), c_top_left_column:(c_top_left_column + c_width - 1)]
# - split into samples -
c_sample_width <- floor(c_width/c_n_samples) # you might lose here up to 1 pixel
split_columns <- cumsum(rep(c_sample_width, c_n_samples))
split_df <- data.frame(start_column = split_columns-(c_sample_width -1), column = split_columns)
sample_pictures <- lapply(1:nrow(split_df), function(cc_row){
row_picture[,split_df$start_column[cc_row]:split_df$column[cc_row]]
})
c_sample_picture <- sample_pictures[[ยง]]
c_sample_picture <- sample_pictures[[1]]
#- subtract background -
c_sample_picture <- c_sample_picture - min(c_sample_picture)
plot(rowMeans(c_sample_picture))
x <- rowMeans(c_sample_picture)
x
threshold = 1
up   <- sapply(1:threshold, function(n) c(x[-(seq(n))], rep(NA, n)))
up
down <-  sapply(-1:-threshold, function(n) c(rep(NA,abs(n)), x[-seq(length(x), length(x) - abs(n) + 1)]))
a    <- cbind(x,up,down)
View(a)
list(minima = which(apply(a, 1, min) == a[,1]), maxima = which(apply(a, 1, max) == a[,1]))
inflect <- function(x, threshold = 1){
up   <- sapply(1:threshold, function(n) c(x[-(seq(n))], rep(NA, n)))
down <-  sapply(-1:-threshold, function(n) c(rep(NA,abs(n)), x[-seq(length(x), length(x) - abs(n) + 1)]))
a    <- cbind(x,up,down)
list(minima = which(apply(a, 1, min) == a[,1]), maxima = which(apply(a, 1, max) == a[,1]))
}
c_row_means <- rowMeans(c_sample_picture)
c_row_means
min_max <- inflect(c_row_means, threshold = 2)
min_max$minima
c_df <- data.frame(row_means = rowMeans(c_sample_picture))
View(c_df)
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 2)
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 2)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr +
geom_line() +
geom_point(aes(fill = min_max))
Tr +
geom_line() +
geom_point(aes(col = min_max))
Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21)
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 5)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21)
Tr
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 1.5, alpha = 0.7) +
theme(legend.position = "top")
Tr
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 10)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 1.5, alpha = 0.7) +
theme(legend.position = "top")
Tr
x <- c_df$row_means
x
x
threshold
threshold <- 4
n <- 1
seq(n)
x[-(seq(n))]
x
# not that it ends in the a data.frame in which x is compared to up and down
# up is just the value threshold pixel further up
up   <- sapply(1:threshold, function(n){
c(x[-(seq(n))], rep(NA, n))
})
x
threshold
-1:-threshold
# not that it ends in the a data.frame in which x is compared to up and down
# up is just the value threshold pixel further up
up   <- sapply(1:threshold, function(n){
c(x[-(seq(n))], rep(NA, n))
})
up
n <- -4
n
rep(NA,abs(n))
x[-seq(length(x), length(x) - abs(n) + 1)]
x[1]
# not that it ends in the a data.frame in which x is compared to up and down
# up is just the value threshold pixel further up, this is done for all thresholds up to the one you give!
up   <- sapply(1:threshold, function(n){
c(x[-(seq(n))], rep(NA, n))
})
# similar down is the value threshold pixel further down,
down <-  sapply(-1:-threshold, function(n){
c(rep(NA,abs(n)), x[-seq(length(x), length(x) - abs(n) + 1)])
})
a    <- cbind(x,up,down)
View(a)
library(viridis)
library(cm.analysis)
cm.show_colors(viridis[2])
cm.show_colors(viridis(2))
cm.show_colors(viridis(3))
cm.show_colors(viridis(10))
viridis(10)
colors_pixel_type <- c("standard" = "gray",
"minimum" = "#482878FF",
"maximum" = "#FDE725FF")
apply(a, 1, min)
apply(a, 1, min, na.rm = TRUE)
# helper functions
# finds local minima in a radius of threshold
inflect <- function(x, threshold = 1){
# not that it ends in the a data.frame in which x is compared to up and down
# up is just the value threshold pixel further up, this is done for all thresholds up to the one you give!
up   <- sapply(1:threshold, function(n){
c(x[-(seq(n))], rep(NA, n))
})
# similar down is the value threshold pixel further down,
down <-  sapply(-1:-threshold, function(n){
c(rep(NA,abs(n)), x[-seq(length(x), length(x) - abs(n) + 1)])
})
a    <- cbind(x,up,down)
# then it checks if the actual value is higher than all values in a radius of threshold
list(minima = which(apply(a, 1, min, na.rm = TRUE) == a[,1]), maxima = which(apply(a, 1, max, na.rm = TRUE) == a[,1]))
}
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 10)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
library(cowplot)
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 10)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 1.5, alpha = 0.7) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
viridis(1)
colors_pixel_type <- c("standard" = "gray",
"minimum" = "#440154FF",
"maximum" = "#FDE725FF")
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 10)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 1.5, alpha = 0.9) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 2, alpha = 0.9) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 15)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 2, alpha = 0.9) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 20)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 2, alpha = 0.9) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
c_df <- data.frame(row = 1:nrow(c_sample_picture), row_means = rowMeans(c_sample_picture))
c_df$min_max <- "standard"
min_max <- inflect(c_row_means, threshold = 15)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 2, alpha = 0.9) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
min_max <- inflect(c_row_means, threshold = 10)
c_df$min_max[min_max$minima] <- "minimum"
c_df$min_max[min_max$maxima] <- "maximum"
Tr <- ggplot(c_df, aes(x = row, y = row_means))
Tr <- Tr +
geom_line() +
geom_point(aes(fill = min_max), shape = 21, size = 2, alpha = 0.9) +
scale_fill_manual("", values = colors_pixel_type) +
theme_cowplot(8) +
theme(legend.position = "top")
Tr
# assume last minimum maximum minimum combination is primer dimer peak!
c_df$min_max[c_df$min_max %in% c("minimum", "maximum")]
# assume last minimum maximum minimum combination is primer dimer peak!
min_max_seq <- c_df$min_max[c_df$min_max %in% c("minimum", "maximum")]
min_max_seq
c("minimum", "maximum", "minimum") %in% min_max_seq
which(min_max_seq == "maximum")
max_indexes <- which(min_max_seq == "maximum")
max_indexes <- max_indexes[!max_indexes %in% c(1, length(min_max_seq))]
max_indexes
min_max_seq
# assume last minimum maximum minimum combination is primer dimer peak!
min_max_seq <- c_df$min_max[c_df$min_max %in% c("minimum", "maximum")]
max_indexes <- which(min_max_seq == "maximum")
max_indexes <- max_indexes[!max_indexes %in% c(1, length(min_max_seq))]
max_indexes_peak <- sapply(max_indexes, function(c_index){
min_max_seq[c_index - 1] == "minimum" && min_max_seq[c_index + 1] == "minimum"
}
pd_peak <-
})
# assume last minimum maximum minimum combination is primer dimer peak!
min_max_seq <- c_df$min_max[c_df$min_max %in% c("minimum", "maximum")]
max_indexes <- which(min_max_seq == "maximum")
max_indexes <- max_indexes[!max_indexes %in% c(1, length(min_max_seq))]
max_indexes_peak <- sapply(max_indexes, function(c_index){
min_max_seq[c_index - 1] == "minimum" && min_max_seq[c_index + 1] == "minimum"
})
max_indexes_peak
max_df <- data.frame(max_index = max_indexes, peak = max_indexes_peak)
View(max_df)
sort(TRUE, FALSE)
sort(c(TRUE, FALSE))
pd_peak_index <- max(max_df$max_index[max_df$peak])
pd_peak_inde
pd_peak_index
# HERE NA if not even primer dimer peak was found
which(c_df$min_max %in% c("minimum", "maximum"))
pd_peak_index
# HERE NA if not even primer dimer peak was found
pd_peak <- c_df[which(c_df$min_max %in% c("minimum", "maximum"))[(pd_peak_index-1):(pd_peak_index + 1)]
})
# --
})
}
# helper functions
# finds local minima in a radius of threshold
inflect <- function(x, threshold = 1){
# not that it ends in the a data.frame in which x is compared to up and down
# up is just the value threshold pixel further up, this is done for all thresholds up to the one you give!
up   <- sapply(1:threshold, function(n){
c(x[-(seq(n))], rep(NA, n))
})
# similar down is the value threshold pixel further down,
down <-  sapply(-1:-threshold, function(n){
c(rep(NA,abs(n)), x[-seq(length(x), length(x) - abs(n) + 1)])
})
a    <- cbind(x,up,down)
# then it checks if the actual value is higher than all values in a radius of threshold
list(minima = which(apply(a, 1, min, na.rm = TRUE) == a[,1]), maxima = which(apply(a, 1, max, na.rm = TRUE) == a[,1]))
}
# HERE NA if not even primer dimer peak was found
pd_peak <- c_df[which(c_df$min_max %in% c("minimum", "maximum"))[(pd_peak_index-1):(pd_peak_index + 1)], ]
View(pd_peak)
(pd_peak_index-1)
(pd_peak_index + 1)
# HERE NA if not even primer dimer peak was found
pd_peak <- c_df[which(c_df$min_max %in% c("minimum", "maximum"))[(pd_peak_index-1):(pd_peak_index + 1)], ]
(pd_peak_index-1):(pd_peak_index + 1)
which(c_df$min_max %in% c("minimum", "maximum"))
which(c_df$min_max %in% c("minimum", "maximum"))[(pd_peak_index-1):(pd_peak_index + 1)]
which(c_df$min_max %in% c("minimum", "maximum"))
corresponding_rows <- which(c_df$min_max %in% c("minimum", "maximum"))
pd_peak <- c_df[corresponding_rows[pd_peak_index-1]:corresponding_rows[pd_peak_index+1], ]
View(pd_peak)
max(pd_peak$row_means)
pd_peak$row_means - min(pd_peak$row_means)
sum(pd_peak$row_means - min(pd_peak$row_means))
corresponding_rows
corresponding_rows[pd_peak_index-1]
# assume: the band peak must end at start minimum of pd peak!
band_peak_exists <- TRUE
max_df <- data.frame(max_index = max_indexes, peak = max_indexes_peak) %>% filter(peak)
max_df <- data.frame(max_index = max_indexes, peak = max_indexes_peak) %>% filter(peak) %>% arrange(desc(max_index))
pd_peak_index <- max_df$max_index[1]
pd_peak_index
rm(list = ls())
library(shiny); runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
library(cm.reports)
cm.knit_report
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
cm.table_theme
?set_flextable_defaults
runApp('~/shiny_apps/lab_plan/app_labplan.R')
cm.table_theme <- function(ftable){
if (!inherits(ftable, "flextable")) {
stop("This theme only supports flextable objects.")
}
even <- seq_len(nrow_part(ftable, "body")) %% 2 == 0
odd <- !even
ftable %<>%
font(fontname = "Calibri Light", part = 'all') %>%
fontsize(size = 12, part = "all") %>%
border_remove() %>%
hline_bottom(border = cm.solid_border, part = "header") %>%
hline_bottom(border = cm.solid_border, part = "body") %>%
hline_top(border = cm.solid_border, part = 'header') %>%
bg(bg = "#E0E0E1", i = odd) %>%
padding(padding.top = 0, padding.bottom = 0) %>%
autofit(add_w = 0, add_h = 0) %>%
align(align = 'left', part = "all") %>%
fix_border_issues()
return(ftable)
}
runApp('~/shiny_apps/lab_plan/app_labplan.R')
cm.solid_border
library(cm.reports)
cm.solid_border
library(cm.reports)
cm.reports::""
cm.reports:::cm.solid_border
class(cm.reports:::cm.solid_border)
flextable::border()
cm.solid_border <- flextable::border(color = "black", width = 0.5, style = "solid")
officer::fp_border()
cm.solid_border <- officer::fp_border(color = "black", width = 0.5, style = "solid")
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
calc_fig_dims_a4()
calc_fig_dims_a4
A4 <- calc_fig_dims_a4()
class(A4)
names(A4)
A4
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
study_name <- "chdcms"
str_length(study_name)
runApp('~/shiny_apps/lab_plan/app_labplan.R')
?flextable::valign
runApp('~/shiny_apps/lab_plan/app_labplan.R')
?officer::body_add_par
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
runApp('~/shiny_apps/lab_plan/app_labplan.R')
