stop("The number of samples in the pruned physeq does not fit to the number of distances in dist_list. Check and come back.")
}
DistMat <- as(dist, "matrix")
# - Transform the Distmatrix into a data frame removing self comparisons -
df <- data.frame(Row = rep(rownames(DistMat), ncol(DistMat)), Col = rep(colnames(DistMat), each = nrow(DistMat)), Distance = as.vector(DistMat))
df <- df[df$Row != df$Col,]
# NB: by excluding distances of samples with themselves, therefore for x samples: (x-1)*x/2 distances = nrow(df)
# Since you kept here otherwise the entire matrix, each distance is in twice here.
# This is what you want because of the faceting in the plot, except for the group to group distances, here you want to remove duplicates,
# which is done further down
# --
# - add the group info -
group_fac <- sample_data(physeq)[[group_var]]
if (!is.factor(group_fac)){
group_fac <- factor(group_fac)
}
samdf <- data.frame(Sample = sample_names(physeq), Group = group_fac)
df$Row_Group <- samdf$Group[match(df$Row, samdf$Sample)]
df$Col_Group <- samdf$Group[match(df$Col, samdf$Sample)]
# --
# - remove here the duplicates of within group comparisons -
df_dup <- df[, c("Distance", "Row_Group", "Col_Group")]
df <- df[!duplicated(df_dup),]
# --
# - for coloring mark what are within group and between group comparisons -
df$Type <- "between"
df$Type[df$Row_Group == df$Col_Group] <- "within"
# --
group_fac
head(df)
# - plot -
Tr <- ggplot(df, aes(x = Col_Group, y = Distance, col = Type))
Tr <- Tr +
geom_boxplot(outlier.color = NA)
if(nsamples(physeq) <= jitter_up_to){
Tr <- Tr +
geom_jitter(position = position_jitter(width = 0.2, height = 0), alpha = 0.65)
}
Tr <- Tr +
facet_grid(Row_Group ~ .)
Tr <- Tr +
xlab("") +
scale_color_manual("", values = c("within" = cbPalette[6], "between" = cbPalette[7])) +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
Tr
levels(group_fac)
levels(group_fac)[1]
Tr + stat_compare_means(ref.group = levels(group_fac)[1], label = "p.signif", method = test, hide.ns = hide.ns)
test = "t.test"
hide.ns = TRUE
p.adjust.method = "BH"
symnum.args = list(cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1), symbols = c("****", "***", "**", "*", "ns"))
Tr + stat_compare_means(ref.group = levels(group_fac)[1], label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
df$Col_Group
Tr <- Tr + stat_compare_means(ref.group = "black.PROX", label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
Tr
str(df)
# - plot -
Tr <- ggplot(df, aes(x = Col_Group, y = Distance, col = Type))
Tr <- Tr +
geom_boxplot(outlier.color = NA)
if(nsamples(physeq) <= jitter_up_to){
Tr <- Tr +
geom_jitter(position = position_jitter(width = 0.2, height = 0), alpha = 0.65)
}
Tr <- Tr +
facet_grid(Row_Group ~ .)
Tr <- Tr +
xlab("") +
scale_color_manual("", values = c("within" = cbPalette[6], "between" = cbPalette[7])) +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
Tr
Tr + stat_compare_means(label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
# - plot -
Tr <- ggplot(df, aes(x = Col_Group, y = Distance))
Tr <- Tr +
geom_boxplot(aes(col = Type), outlier.color = NA)
if(nsamples(physeq) <= jitter_up_to){
Tr <- Tr +
geom_jitter(aes(col = Type), position = position_jitter(width = 0.2, height = 0), alpha = 0.65)
}
Tr <- Tr +
facet_grid(Row_Group ~ .)
Tr <- Tr +
xlab("") +
scale_color_manual("", values = c("within" = cbPalette[6], "between" = cbPalette[7])) +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
Tr
Tr + stat_compare_means(label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
Tr + stat_compare_means(ref.group = "black.PROX", label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
hide.ns = FALSE
Tr + stat_compare_means(ref.group = "black.PROX", label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
Tr + stat_compare_means(ref.group = levels(group_fac), label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
warnings()
Tr <- Tr + stat_compare_means(ref.group = levels(group_fac)[1], label = "p.signif", method = test, hide.ns = hide.ns, symnum.args = symnum.args)
Tr
rm(list = ls())
datapath <- "/Users/jvb740/Coursera_MOOC/20190404_WDStarTest"
load(file.path(datapath, "40168_2019_659_MOESM3_ESM.rdata"))
physeq
source(file.path(datapath, "Wd.R"))
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/MicrobiomeX2/Functions"
# source(file.path(functionpath, "GalaxyFunctions.R"))
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_010_explore_ps_functions.R"))
source(file.path(functionpath, "_n_020_alpha_diversity_functions.R"))
source(file.path(functionpath, "_n_030_preprocess_filtering_functions.R"))
source(file.path(functionpath, "_n_040_beta_diversity_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
source(file.path(functionpath, "_n_060_phylum_analysis_functions.R"))
# - look at the sample_data and add the interaction term for your own analysis -
SD <- get_sample_data(physeq) # so really just race and location
SD$race.location <- with(SD, interaction(race, location))
SD$race.location <- factor(SD$race.location, levels = c("black.PROX", "black.DIST", "white.PROX", "white.DIST"))
sample_data(physeq) <- SD
# --
# - look at the tax_table -
TT <- get_tax_table(physeq)
# - remember they only kept Genera they deemed relevant for colorectal cancer -
unique(tax_table(physeq)[,"Genus"])
table(TT$Genus)
# --
# - The OTU table shows you that they this table is still with counts -
OTU <- get_otu_table(physeq)
# --
# - define colors -
color_race <- viridis(3)[1:2]
names(color_race) <- c("black", "white")
color_race.location <-c(cbPalette[3], cbPalette[6:8])
names(color_race.location) <- c("black.PROX", "black.DIST", "white.PROX", "white.DIST")
# --
bar_plot_ps_ra <- plot_sample_bars(physeq = physeq, x = "Sample", y = "Abundance", group_var = "race.location", color_levels = color_race.location, fill = "Genus", color_sample_names = FALSE, col_vec = NULL, facet_grid = NULL, order_by_firmicutes = FALSE)
bar_plot_ps_ra
# - calculate the jsd distance between all samples -
phy.dist = phyloseq::distance(physeq, method="jsd")
# - do the adonis overall and pairwise -
group_fac <- SD$race.location
adonisRes <- loop_vegan_adonis(dist_obj = phy.dist, group_fac = group_fac, nperm = 99999)
# - illustrate the between and within group distances similar to meandist of vegan -
group_var <- "race.location"
Tr_dist_simple <- compare_beta_div_distances_simple(dist = phy.dist, physeq = physeq, group_var = group_var, jitter_up_to = 100, ggpubr = FALSE)
Tr_dist_int <- compare_beta_div_distances_intermediate(dist = phy.dist, physeq = physeq, group_var = group_var, jitter_up_to = 100, ggpubr = TRUE)
# -- do your own PCOa --
ordination_type = "PCoA"
ordination <- phyloseq::ordinate(physeq, method = ordination_type, distance = phy.dist)
eigvec <- phyloseq:::extract_eigenvalue.pcoa(ordination)
axes <- 1:2
fracvar = eigvec[axes]/sum(eigvec)
percvar = round(100 * fracvar, 1)
ellipse_level = 0.95
DF_beta <- phyloseq::plot_ordination(physeq, ordination, justDF = TRUE)
Tr <- ggplot(DF_beta, aes(x = Axis.1, y = Axis.2))
Tr <- Tr +
#stat_ellipse(geom = "polygon", aes_string(fill = group_var), type = "t", alpha = 0.15, level = ellipse_level) +
#stat_ellipse(aes_string(col = group_var), type = "t", linetype = "dashed", level = ellipse_level) +
#geom_point(col = cbPalette[1], size = 0.75, alpha = 0.5) +
geom_point(aes_string(col = group_var), size = 1.5) +
scale_color_manual("", values = color_race.location) +
#scale_fill_manual("", values = color_race.location) +
theme_bw()
#ggtitle(paste("jsd (Counts):", level))
strivar = as(c(Tr$label$x, Tr$label$y), "character")
strivar = paste0(strivar, " (", percvar, " %)")
Tr <- Tr + xlab(strivar[1]) + ylab(strivar[2])
Tr
levels(group_fac)
Tr_dist_simple
Tr_dist_int
adonisRes
# - he first performs a principal coordinate analysis -
phy.pco = dudi.pco(phy.dist, scannf=FALSE, nf=3) # from ade4 package
# - calculate the mean within group distances -
race.location = with(sample_data(physeq), interaction(race, location))
meandist(phy.dist, race.location)
rm(list = ls())
library(phyloseq); packageVersion("phyloseq")
library(ade4)
library(vegan)
library(viridis)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggpubr)
datapath <- "/Users/jvb740/Coursera_MOOC/20190404_WDStarTest"
load(file.path(datapath, "40168_2019_659_MOESM3_ESM.rdata"))
physeq
source(file.path(datapath, "Wd.R"))
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/MicrobiomeX2/Functions"
# source(file.path(functionpath, "GalaxyFunctions.R"))
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_010_explore_ps_functions.R"))
source(file.path(functionpath, "_n_020_alpha_diversity_functions.R"))
source(file.path(functionpath, "_n_030_preprocess_filtering_functions.R"))
source(file.path(functionpath, "_n_040_beta_diversity_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
source(file.path(functionpath, "_n_060_phylum_analysis_functions.R"))
# - look at the sample_data and add the interaction term for your own analysis -
SD <- get_sample_data(physeq) # so really just race and location
SD$race.location <- with(SD, interaction(race, location))
SD$race.location <- factor(SD$race.location, levels = c("black.PROX", "black.DIST", "white.PROX", "white.DIST"))
sample_data(physeq) <- SD
# --
# - look at the tax_table -
TT <- get_tax_table(physeq)
# - remember they only kept Genera they deemed relevant for colorectal cancer -
unique(tax_table(physeq)[,"Genus"])
table(TT$Genus)
# --
# - The OTU table shows you that they this table is still with counts -
OTU <- get_otu_table(physeq)
# --
# - define colors -
color_race <- viridis(3)[1:2]
names(color_race) <- c("black", "white")
color_race.location <-c(cbPalette[3], cbPalette[6:8])
names(color_race.location) <- c("black.PROX", "black.DIST", "white.PROX", "white.DIST")
# --
bar_plot_ps_ra <- plot_sample_bars(physeq = physeq, x = "Sample", y = "Abundance", group_var = "race.location", color_levels = color_race.location, fill = "Genus", color_sample_names = FALSE, col_vec = NULL, facet_grid = NULL, order_by_firmicutes = FALSE)
# - he first performs a principal coordinate analysis -
phy.pco = dudi.pco(phy.dist, scannf=FALSE, nf=3) # from ade4 package
# - calculate the jsd distance between all samples -
phy.dist = phyloseq::distance(physeq, method="jsd")
# - he first performs a principal coordinate analysis -
phy.pco = dudi.pco(phy.dist, scannf=FALSE, nf=3) # from ade4 package
# - calculate the mean within group distances -
race.location = with(sample_data(physeq), interaction(race, location))
meandist(phy.dist, race.location)
diag(meandist(phy.dist, race.location))
Tr <- s.class(phy.pco$li, race.location, cellipse = 0,
col = c('red', 'orange', 'black', 'gray75'))
Tr
class(Tr)
eval(Tr)
eval(Tr)
?s.class
Tr_them <- s.class(phy.pco$li, race.location, cellipse = 0,
col = color_race.location)
class(Tr_them)
color_race.location
race.location
pal(color_race.location)
rm(list = ls())
datapath <- "/Users/jvb740/Coursera_MOOC/20190404_WDStarTest"
load(file.path(datapath, "40168_2019_659_MOESM3_ESM.rdata"))
physeq
source(file.path(datapath, "Wd.R"))
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/MicrobiomeX2/Functions"
# source(file.path(functionpath, "GalaxyFunctions.R"))
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_010_explore_ps_functions.R"))
source(file.path(functionpath, "_n_020_alpha_diversity_functions.R"))
source(file.path(functionpath, "_n_030_preprocess_filtering_functions.R"))
source(file.path(functionpath, "_n_040_beta_diversity_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
source(file.path(functionpath, "_n_060_phylum_analysis_functions.R"))
# - look at the sample_data and add the interaction term for your own analysis -
SD <- get_sample_data(physeq) # so really just race and location
SD$race.location <- with(SD, interaction(race, location))
SD$race.location <- factor(SD$race.location, levels = c("black.PROX", "black.DIST", "white.PROX", "white.DIST"))
sample_data(physeq) <- SD
# - look at the tax_table -
TT <- get_tax_table(physeq)
# - remember they only kept Genera they deemed relevant for colorectal cancer -
unique(tax_table(physeq)[,"Genus"])
table(TT$Genus)
# - The OTU table shows you that they this table is still with counts -
OTU <- get_otu_table(physeq)
# - define colors -
color_race <- viridis(3)[1:2]
names(color_race) <- c("black", "white")
color_race.location <-c(cbPalette[3], cbPalette[6:8])
names(color_race.location) <- c("black.PROX", "black.DIST", "white.PROX", "white.DIST")
bar_plot_ps_ra <- plot_sample_bars(physeq = physeq, x = "Sample", y = "Abundance", group_var = "race.location", color_levels = color_race.location, fill = "Genus", color_sample_names = FALSE, col_vec = NULL, facet_grid = NULL, order_by_firmicutes = FALSE)
# - calculate the jsd distance between all samples -
phy.dist = phyloseq::distance(physeq, method="jsd")
# - calculate the mean within and between group distances -
# race.location = with(sample_data(physeq), interaction(race, location))
race.location <- sample_data(physeq)[["race.location"]]
race.location
meandist(phy.dist, race.location)
diag(meandist(phy.dist, race.location))
Tr_them <- s.class(phy.pco$li, race.location, cellipse = 0,
col = color_race.location)
# - he first performs a principal coordinate analysis -
phy.pco = dudi.pco(phy.dist, scannf=FALSE, nf=3) # from ade4 package
Tr_them <- s.class(phy.pco$li, race.location, cellipse = 0,
col = color_race.location)
Tr_them
rm(list = ls())
rm(list = ls())
library(phyloseq); packageVersion("phyloseq")
library(ade4)
library(vegan)
library(viridis)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggpubr)
datapath <- "/Users/jvb740/Coursera_MOOC/20190404_WDStarTest"
load(file.path(datapath, "40168_2019_659_MOESM3_ESM.rdata"))
physeq
source(file.path(datapath, "Wd.R"))
functionpath <- "/Users/jvb740/MarieCurie_Work/BackgroundKnowledge/MicrobiomeX2/Functions"
# source(file.path(functionpath, "GalaxyFunctions.R"))
source(file.path(functionpath, "_n_000_helper_functions.R"))
source(file.path(functionpath, "_n_010_explore_ps_functions.R"))
source(file.path(functionpath, "_n_020_alpha_diversity_functions.R"))
source(file.path(functionpath, "_n_030_preprocess_filtering_functions.R"))
source(file.path(functionpath, "_n_040_beta_diversity_functions.R"))
source(file.path(functionpath, "_n_050_diff_abundance_functions.R"))
source(file.path(functionpath, "_n_060_phylum_analysis_functions.R"))
# - look at the sample_data and add the interaction term for your own analysis -
SD <- get_sample_data(physeq) # so really just race and location
SD$race.location <- with(SD, interaction(race, location))
SD$race.location <- factor(SD$race.location, levels = c("black.PROX", "black.DIST", "white.PROX", "white.DIST"))
sample_data(physeq) <- SD
# --
# - look at the tax_table -
TT <- get_tax_table(physeq)
# - remember they only kept Genera they deemed relevant for colorectal cancer -
unique(tax_table(physeq)[,"Genus"])
table(TT$Genus)
# --
# - The OTU table shows you that they this table is still with counts -
OTU <- get_otu_table(physeq)
# --
# - define colors -
color_race <- viridis(3)[1:2]
names(color_race) <- c("black", "white")
color_race.location <-c(cbPalette[3], cbPalette[6:8])
names(color_race.location) <- c("black.PROX", "black.DIST", "white.PROX", "white.DIST")
# --
bar_plot_ps_ra <- plot_sample_bars(physeq = physeq, x = "Sample", y = "Abundance", group_var = "race.location", color_levels = color_race.location, fill = "Genus", color_sample_names = FALSE, col_vec = NULL, facet_grid = NULL, order_by_firmicutes = FALSE)
bar_plot_ps_ra
# - calculate the jsd distance between all samples -
phy.dist = phyloseq::distance(physeq, method="jsd")
# -- proof that the distances are the same in case of jsd for relative abundances --
# physeq_ra <- phyloseq::transform_sample_counts(physeq, function(x){x/sum(x)})
# phy.dist_ra = phyloseq::distance(physeq_ra, method="jsd")
# all.equal(phy.dist, phy.dist_ra) # TRUE
# ----
# --
# - illustrate the between and within group distances similar to meandist of vegan -
group_var <- "race.location"
Tr_dist_simple <- compare_beta_div_distances_simple(dist = phy.dist, physeq = physeq, group_var = group_var, jitter_up_to = 100, ggpubr = FALSE)
Tr_dist_int <- compare_beta_div_distances_intermediate(dist = phy.dist, physeq = physeq, group_var = group_var, jitter_up_to = 100, ggpubr = FALSE)
# --
# -- do your own PCOa --
ordination_type = "PCoA"
ordination <- phyloseq::ordinate(physeq, method = ordination_type, distance = phy.dist)
eigvec <- phyloseq:::extract_eigenvalue.pcoa(ordination)
axes <- 1:2
fracvar = eigvec[axes]/sum(eigvec)
percvar = round(100 * fracvar, 1)
ellipse_level = 0.95
DF_beta <- phyloseq::plot_ordination(physeq, ordination, justDF = TRUE)
Tr <- ggplot(DF_beta, aes(x = Axis.1, y = Axis.2))
Tr <- Tr +
#stat_ellipse(geom = "polygon", aes_string(fill = group_var), type = "t", alpha = 0.15, level = ellipse_level) +
#stat_ellipse(aes_string(col = group_var), type = "t", linetype = "dashed", level = ellipse_level) +
#geom_point(col = cbPalette[1], size = 0.75, alpha = 0.5) +
geom_point(aes_string(col = group_var), size = 1.5) +
scale_color_manual("", values = color_race.location) +
#scale_fill_manual("", values = color_race.location) +
theme_bw() +
ggtitle("jsd own PCOA")
strivar = as(c(Tr$label$x, Tr$label$y), "character")
strivar = paste0(strivar, " (", percvar, " %)")
Tr <- Tr + xlab(strivar[1]) + ylab(strivar[2])
# ----
Tr
Tr_dist_simple
Tr_dist_int
# - he first performs a principal coordinate analysis -
phy.pco = dudi.pco(phy.dist, scannf=FALSE, nf=3) # from ade4 package
# - calculate the mean within and between group distances -
# race.location = with(sample_data(physeq), interaction(race, location))
race.location <- sample_data(physeq)[["race.location"]]
meandist(phy.dist, race.location)
diag(meandist(phy.dist, race.location))
Tr_them <- s.class(phy.pco$li, race.location, cellipse = 0,
col = color_race.location)
grid.arrange(Tr, eval(Tr_them), ncol = 2)
library(gridExtra)
grid.arrange(Tr, eval(Tr_them), ncol = 2)
Tr
eval(Tr_them)
# - do the adonis overall and pairwise -
group_fac <- SD$race.location
adonisRes <- loop_vegan_adonis(dist_obj = phy.dist, group_fac = group_fac, nperm = 99999)
adonisRes
adonis(phy.dist~race.location, permutations=99999)
AdResult <- adonis(phy.dist~race.location, permutations=99999)
AdResult
tidy(AdResult)
library(tidyverse)
tidy(AdResult)
?tidy
generics::tidy(AdResult)
summary(AdResult)
coefficients(AdResult)
AdResult$aov.tab
AdResult$aov.tab[1,]
WdS.test(phy.dist, race.location, nrep = 99999)
WdSResult <- WdS.test(phy.dist, race.location, nrep = 99999)
class(WdSResult)
unlist(WdSResult)
data.frame(WdSResult)
SD
race <- sample_data(physeq)[["race"]]
race
color_race
Tr_them <- s.class(phy.pco$li, race, cellipse = 0,
col = color_race)
Tr_them <- s.class(phy.pco$li, race, cellipse = 2,
col = color_race)
Tr_them <- s.class(phy.pco$li, race, cellipse = 1,
col = color_race)
Tr_them <- s.class(phy.pco$li, race, cellipse = 0,
col = color_race)
AdResult <- adonis(phy.dist~race, permutations=99999)
AdResult$aov.tab[1,]
WdSResult <- WdS.test(phy.dist, race, nrep = 99999)
data.frame(WdSResult)
SD$location
color_location <- QuantColors15[1:2]
names(color_location) <- c("DIST", "PROX")
location <- sample_data(physeq)[["location"]]
Tr_them <- s.class(phy.pco$li, location, cellipse = 0,
col = color_race)
AdResult <- adonis(phy.dist~location, permutations=99999)
WdSResult <- WdS.test(phy.dist, location, nrep = 99999)
AdResult$aov.tab[1,]
data.frame(WdSResult)
AdResult <- adonis(phy.dist~race.location, permutations=99999)
WdSResult <- WdS.test(phy.dist, race.location, nrep = 99999)
AdResult_r <- adonis(phy.dist~race, permutations=99999)
WdSResult_r <- WdS.test(phy.dist, race, nrep = 99999)
data.frame(WdSResult_r)
location <- sample_data(physeq)[["location"]]
AdResult_l <- adonis(phy.dist~location, permutations=99999)
WdSResult_l <- WdS.test(phy.dist, location, nrep = 99999)
AdResult
AdResult$aov.tab[1,]
AdResult$aov.tab[1,6]
WdSResult[[1]]
Table2 <- data.frame(Type = c("race.location", "race", "location"), adonis_p = c(AdResult$aov.tab[1,6], AdResult_r$aov.tab[1,6], AdResult_l$aov.tab[1,6]), WdStar_p = c(WdSResult[[1]], WdSResult_r[[1]], WdSResult_r[[1]]))
Table2
Table2 <- data.frame(Type = c("race.location", "race", "location"), adonis_p = c(AdResult$aov.tab[1,6], AdResult_r$aov.tab[1,6], AdResult_l$aov.tab[1,6]), WdStar_p = c(WdSResult[[1]], WdSResult_r[[1]], WdSResult_l[[1]]))
Table2
Table2 <- data.frame(Type = c("race", "location", "race.location"), adonis_p = c(AdResult_r$aov.tab[1,6], AdResult_l$aov.tab[1,6], AdResult$aov.tab[1,6]), WdStar_p = c(WdSResult_r[[1]], WdSResult_l[[1]], WdSResult[[1]]))
Table2
adonisRes
with(sample_data(physeq), table(race, location))
Tw2.posthoc.tests(phy.dist, race.location, nrep=999)
WdSResult_l
Tw2Pairs <- Tw2.posthoc.tests(phy.dist, race.location, nrep=999)
adonisRes
Tw2Pairs
Comparison <- cbind(adonisRes[-1,1:3], Tw2Pairs)
Comparison
Comparison$pRatio <- Comparison$adonis_pval/Comparison$p.value
Comparison$adonis_pval
Comparison$p.value
Comparison$pRatio <- Comparison$adonis_pval/as.numeric(Comparison$p.value)
Comparison$pRatio
Comparison
Tw2Rest <- Tw2.posthoc.1vsAll.tests(phy.dist, race.location, nrep = 999)
Tw2Rest
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(shiny); runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar/app_Calendar.R')
rm(list = ls())
rm(list = ls())
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Calendar")
library(rdrop2)
# - in September 2019 I had again problems to get the app(s) running on shinyappsio -
# in particular, the catching of the data from dropbox did not work, even though it  worked fine
# when running on my computer
# 1.) I read again this app: https://daattali.com/shiny/persistent-data-storage/
# in particular the storage type: Dropbox (remote), not too helpful, I fear it's more about
# the authentication approach (https://deanattali.com/blog/shiny-persistent-data-storage/#dropbox):
# https://github.com/karthik/rdrop2#accessing-dropbox-on-shiny-and-remote-servers
# so I thought I try the token option described in the readme
# drop_auth() # but didn't do anything
# --
drop_auth()
token <- drop_auth()
token
getwd()
saveRDS(token, file = "token.rds")
library(shiny); runApp('app_Calendar.R')
rm(list = ls())
runApp('app_Calendar.R')
rm(list =  ls())
getwd()
token <- readRDS("token.rds")
token
runApp('app_Calendar.R')
runApp('app_Calendar.R')
library(shiny); runApp('~/shiny_apps/account_viewer/app_account_viewer.R')
