# --
function_path <- "~/CM_Work/repos/dada2cm/prepare_ref_list"
# source the filtering functions ============
source(file.path(function_path, "20210819_functions_work_with_refDBs.R"))
# 1.) load all ref_DBs  ======================
ref_db_dfs <- lapply(ref_dbs, function(c_file){
readRDS(file.path(path_RefDBs, c_file))
})
ref_db_df <- do.call("rbind", ref_db_dfs)
View(ref_db_df)
rm(list = ls())
library(shiny); runApp('~/shiny_apps/planner_work/app_planner_work.R')
runApp('~/shiny_apps/planner_work/app_planner_work.R')
library(tidyverse)
al <- readRDS("~/Downloads/account_list.rds")
names(al)
hl <- al[["Handelsbanken_Loen"]]
df <- read.csv2(file = "~/Downloads/start_nem.csv", header = FALSE, stringsAsFactors = FALSE, sep = ";", fileEncoding="iso-8859-1")
df <- df[,1:4]
View(df)
account <- "Handelsbanken_Loen"
colnames(df) <- c("Date", "Text", "Amount", "Saldo")
df$Currency <- "DKK"
df$Date <- lubridate::parse_date_time(df$Date, orders = "dmy", tz = "CET")
df$Account <- account
if (df$Date[1] > df$Date[nrow(df)]) {
df <- df[nrow(df):1,] # make sure oldest is on top for following Amount check
}
View(df)
al[["Handelsbanken_Loen"]] <- df
saveRDS(al, "~/Downloads/account_list.rds")
library(shiny); runApp('~/shiny_apps/account_viewer/app_account_viewer.R')
rm(list = ls())
library(shiny); runApp('~/shiny_apps/planner_work/app_planner_work.R')
library(shiny); runApp('~/shiny_apps/asv_check/app_asv_check.R')
runApp('~/shiny_apps/asv_check/app_asv_check.R')
library(shiny)
#library(shinyTime)
library(shinyFiles)
library(lubridate)
library(rdrop2)
library(cm.analysis)
library(ggtree)
library(treeio)
library(ape)
library(Biostrings)
library(gridExtra)
# library(ggrepel)
library(tidyverse)
# - Tab01_01 load data =======
rv <- list()
selected_folder <- "~/Boxcryptor/Dropbox (CM)/Main/studies/kijpil/input"
files_in_folder <- list.files(selected_folder)
if(!all(c(sum(str_detect(files_in_folder, "asv_counts.rds")), sum(str_detect(files_in_folder, "asv_lookup.rds")),
sum(str_detect(files_in_folder, "asv_taxonomy.rds")), sum(str_detect(files_in_folder, "asv_alignment.align"))) == 1)){
rv$raw_data_list <- NULL
rv$infoText <- "Could not find exactly one asv_counts.rds, asv_lookup.rds, asv_taxonomy.rds, and asv_alignment.aling file in the selected folder. No data loaded, check folder."
} else {
count_table_file <- files_in_folder[str_detect(files_in_folder, "asv_counts.rds")]
asv_lookup_file <- files_in_folder[str_detect(files_in_folder, "asv_lookup.rds")]
asv_taxonomy_file <- files_in_folder[str_detect(files_in_folder, "asv_taxonomy.rds")]
asv_alignment_file <- files_in_folder[str_detect(files_in_folder, "asv_alignment.align")]
file_list <- list(count_table_file, asv_lookup_file, asv_taxonomy_file, asv_alignment_file)
raw_data_list <- lapply(file_list[1:3], function(c_file){
cm.read_data(file.path(selected_folder, c_file))
})
raw_data_list[[4]] <- seqinr::read.alignment(file.path(selected_folder, asv_alignment_file), format = "fasta")
names(raw_data_list) <- c("count_table", "asv_lookup", "asv_taxonomy", "asv_alignment")
# - if improvement_list is present load it also -
if (sum(str_detect(files_in_folder, "asv_taxonomy_improvement_list.rds")) == 1){
asv_taxonomy_improvement_list_file <- files_in_folder[str_detect(files_in_folder, "asv_taxonomy_improvement_list.rds")]
file_list[["taxonomy_improvement_list"]] <- asv_taxonomy_improvement_list_file
raw_data_list[["taxonomy_improvement_list"]] <- cm.read_data(file.path(selected_folder, asv_taxonomy_improvement_list_file))
} else {
raw_data_list[["taxonomy_improvement_list"]] <- NULL
}
# --
rv$raw_data_list <- raw_data_list
# - add a check to issue big warning if n_asvs do not fit -
n_asv_ct <- ncol(raw_data_list[["count_table"]])
n_asv_lu <- nrow(raw_data_list[["asv_lookup"]])
n_asv_tax <- nrow(raw_data_list[["asv_taxonomy"]][[1]])
n_asv_alignment <- raw_data_list[["asv_alignment"]]$nb
if (!is.null(raw_data_list[["taxonomy_improvement_list"]])){
n_asv_il <- length(raw_data_list[["taxonomy_improvement_list"]][["taxa_options"]])
} else {
n_asv_il <- NULL
}
asv_numbers <- c(n_asv_ct, n_asv_lu, n_asv_tax, n_asv_alignment, n_asv_il)
names(asv_numbers) <- names(raw_data_list)
if (length(unique(asv_numbers)) != 1){
c_warning <- paste(". Warning: files had different numbers of asvs which will cause problems. Specifically", paste(names(asv_numbers), asv_numbers, collapse = ", "), sep = " ")
} else {
c_warning <- paste('. Number of asvs =', unique(asv_numbers))
}
# --
rv$infoText <- paste0("Loaded the files: ", paste0(unlist(file_list), collapse = ", "), c_warning)
}
# --
# - Tab01_02 calc_asv_groups ===========
input <- list()
input$max_mismatch <- 5
input$group_type <- "exclusive"
asv_lookup <- rv$raw_data_list[["asv_lookup"]]
asvs <- asv_lookup$sequence
asv_names <- asv_lookup$ASV
asv_alignment <- rv$raw_data_list[["asv_alignment"]]
# - then calculate distances from alignment, then pid_matrix, then n_mismatch matrix -
asv_alignment_dist <- seqinr::dist.alignment(asv_alignment)
#NB: ? see seqinr::dist.alignment for good infos
asv_alignment_dist_matrix <- as.matrix(asv_alignment_dist)
# -- order as asvs not as alignment --
asv_alignment_dist_matrix <- asv_alignment_dist_matrix[asv_names, asv_names]
# -- --
pid_matrix <- 100*(1-asv_alignment_dist_matrix^2)
nchars <- nchar(asvs)
max_length_matrix <- sapply(1:length(asvs), function(i){
x <- nchars
x[nchars[i] > x] <- nchars[i]
x
})
n_mismatch_matrix <- max_length_matrix * (1-pid_matrix/100)
# --
# - Then calculate the groups from the n_mismatch_matrix -
max_mismatch <- input$max_mismatch
n_mismatch_matrix_bin <- n_mismatch_matrix <= max_mismatch
group_list <- apply(n_mismatch_matrix_bin, 1, function(x){
colnames(n_mismatch_matrix_bin)[x]
})
names(group_list) <- asv_names
group_list <- group_list[sapply(group_list, length) > 1]
# make it unique, i.e. remove entries with identical groups -
group_list <- group_list[!duplicated(group_list)]
# also remove groups that are completely included in other groups
included_in_other_group <- sapply(1:length(group_list), function(i){
any(sapply(group_list[-i], function(c_group){
all(group_list[[i]] %in% c_group)
}))
})
group_list <- group_list[!included_in_other_group]
# if requested, connect groups with members that are less than max_mismatch apart:
if (input$group_type == "connected"){
#group_list_exclusive <- group_list # to save also those where all members are very close to each other
if (length(unlist(group_list)) != length(unique(unlist(group_list)))) { # meaning some ASVs are still in serveral groups
while (length(unlist(group_list)) != length(unique(unlist(group_list)))){
# -- find ASVs that are in several groups --
multi_group_asvs <- names(table(unlist(group_list))[table(unlist(group_list)) > 1])
# -- --
# -- find the group the first multi_group_asv is in  --
in_group <- which(sapply(group_list, function(c_list){multi_group_asvs[1] %in% c_list}))
# --
# - get the union group and replace with old groups -
union_group <- sort(Reduce(f = "union", group_list[in_group]))
group_list[[in_group[1]]] <- union_group
group_list <- group_list[-in_group[-1]]
names(group_list) <- sapply(group_list, `[[`, 1) # name here by first ASV even though not necessary the center
# --
}
}
}
group_list <- group_list[sort(names(group_list))]
# --
# - Calculate the count correlation plots for the groups -
count_table <- rv$raw_data_list[["count_table"]]
group_counts_plots <- lapply(group_list, function(c_group){
#print(c_group)
# - this should probably be linked to a warning and is only done because you might use the app after removal of some ASVs from count table -
c_group <- c_group[c_group %in% colnames(count_table)]
# --
plot_data <- as.data.frame(count_table[, c_group, drop = FALSE]) %>% rownames_to_column("sample_name") # %>% cm.add_metadata(meta, join_column = "amplicon_file")
# - filter out samples in which all asvs are 0 -
not_all_zero <- apply(dplyr::select(plot_data, all_of(c_group)), 1, function(x){any(x > 0)})
plot_data <- dplyr::filter(plot_data, not_all_zero)
# --
plot_data <- pivot_longer(plot_data, cols = all_of(c_group), names_to = "ASV", values_to = "counts")
Tr <- ggplot(plot_data, aes(x = sample_name, y = counts))
Tr <- Tr +
geom_line(aes(group = ASV, col = ASV)) +
geom_point(aes(col = ASV)) +
scale_y_log10() +
theme_cowplot(8) +
xlab("") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
Tr
})
asv_tax <- rv$raw_data_list[["asv_taxonomy"]]
main_taxes <- asv_tax$Tax
main_taxes <- main_taxes %>% rownames_to_column("ASV")
full_tax <- asv_tax$FullTax
ra_table <- cm.relative_abundance(count_table)
group_tree_plots <- lapply(group_list, function(c_group){
# print(c_group)
# filter distances
c_dist_matrix <- asv_alignment_dist_matrix[c_group, c_group]
c_dist <- as.dist(c_dist_matrix)
# calculate tree
#c_tree <- ape::nj(c_dist)
c_tree <- phangorn::midpoint(phangorn::upgma(c_dist))
# -- use treeio package for better plotting --
c_tree_treeio <- as.treedata(c_tree)#new("treedata", phylo = c_tree)
# you need to add @data for the plot
c_n_nodes <- getNodeNum(c_tree_treeio) # tips plus internal nodes
c_n_internal_nodes <- Nnode(c_tree_treeio, internal.only = TRUE) #only the internal
# generate data slot
original_tip_labels <- c_tree_treeio@phylo$tip.label
# new_tip_labels <- main_taxes[match(c_tree_treeio@phylo$tip.label, main_taxes$ASV),]
# new_tip_labels <- apply(dplyr::select(new_tip_labels, ASV, MainTax), 1, function(x){paste(x, collapse = ": ")})
# c_tree_treeio@phylo$tip.label <- new_tip_labels
node_data <- tibble(node = 1:c_n_nodes, node_names = c(c_tree_treeio@phylo$tip.label, rep(NA, c_n_internal_nodes)))
c_ra_sums <- colSums(ra_table[, original_tip_labels])
c_ra_max <- apply(ra_table[, original_tip_labels], 2, max)
node_data$ra_sums <- c(c_ra_sums, rep(NA, c_n_internal_nodes))
node_data$ra_max <- c(c_ra_max, rep(NA, c_n_internal_nodes))
node_data$Size <- 5*node_data$ra_max/max(node_data$ra_max, na.rm = TRUE)
node_data$main_tax <- c(main_taxes$MainTax[match(original_tip_labels, main_taxes$ASV)], rep(NA, c_n_internal_nodes))
node_data$annotation_level <- c(main_taxes$Level[match(original_tip_labels, main_taxes$ASV)], rep(NA, c_n_internal_nodes))
c_tree_treeio@data <- node_data
# print(c_group)
Tr <- ggtree(c_tree_treeio) +
geom_label(aes(x = branch, label = node_names), fill = "lightgray") +
#ggtree::geom_tiplab() + # caused surprising issue
geom_tippoint(aes(size = Size, col = main_tax)) +
guides(size = "none") +
# theme_cowplot(8) +
#ggplot2::xlim(0, 0.06) +
theme(legend.title = element_blank(),
legend.position = "top")
Tr
})
mismatch_table_list <- lapply(group_list, function(c_group){
#print(c_group)
c_mmm <- n_mismatch_matrix[c_group, c_group]
c_mm_df <- as.data.frame(c_mmm)
c_mm_df <- c_mm_df %>% rownames_to_column("ASV")
c_mm_df <- merge(c_mm_df, main_taxes, by = "ASV")
c_mm_df$ra_sum <- colSums(ra_table[, c_mm_df$ASV])
c_mm_df$ra_max <- apply(ra_table[, c_mm_df$ASV], 2, max)
c_mm_df
})
il <- rv$raw_data_list[["taxonomy_improvement_list"]]
taxa_options <- il[["taxa_options"]]
names(taxa_options) <- asv_lookup$ASV[match(names(taxa_options), asv_lookup$sequence)]
c_group <- group_list[[2]]
c_to <- taxa_options[c_group]
c_df <- do.call("rbind", c_to)
# for simplicity redo seq_id, assignment_id, add entry_id
amplis <- unique(c_df$Seq)
seq_id_lu <- data.frame(Seq = amplis, seq_ID = paste0("Seq_", sprintf(fmt = paste0("%0.", floor(log10(length(amplis))) + 1,  "d"), 1:length(amplis))))
c_df$seq_ID <- seq_id_lu$seq_ID[match(c_df$Seq, seq_id_lu$Seq)]
assignment_lu <- unique(c_df[, c("kingdom", "phylum", "class", "order", "family", "genus", "species")])
assignment_lu <- arrange(assignment_lu, kingdom, phylum, class, order, family, genus, species)
assignment_lu$assignment <- apply(assignment_lu, 1, function(x){paste0(paste(as.character(x)[!is.na(x)], collapse = ";"),";")})
assignment_lu$assignment_ID <- paste0("Ass_", sprintf(fmt = paste0("%0.", floor(log10(nrow(assignment_lu))) + 1,  "d"), 1:nrow(assignment_lu)))
c_df$assignment <- apply(dplyr::select(c_df, kingdom:species), 1, function(x){paste0(paste(as.character(x)[!is.na(x)], collapse = ";"),";")})
c_df$assignment_ID <- assignment_lu$assignment_ID[match(c_df$assignment, assignment_lu$assignment)]
c_df$entry <- paste(c_df$seq_ID, c_df$assignment_ID)
entry_lu <- data.frame(entry = unique(c_df$entry))
entry_lu$entry_id <- paste0("Entry_", sprintf(fmt = paste0("%0.", floor(log10(nrow(entry_lu))) + 1,  "d"), 1:nrow(entry_lu)))
c_df$entry_ID <- entry_lu$entry_id[match(c_df$entry, entry_lu$entry)]
# simplify
c_df$ASV <- rep(names(c_to), sapply(c_to, nrow))
ts <- dplyr::select(c_df, kingdom:species)
ts$species[!is.na(ts$species)] <- paste(ts$genus[!is.na(ts$species)], ts$species[!is.na(ts$species)])
mtax <- cm.asv_main_tax(ts, max_resolution_in_column = "last")
c_df <- cbind(c_df, mtax)
c_df$bps <- nchar(c_df$Seq)
asvss <- asv_lookup$sequence[match(c_df$ASV, asv_lookup$ASV)]
asvss
unique(asvss)
c_df$ASV
pa <- Biostrings::pairwiseAlignment(pattern = DNAStringSet(asvss), subject = DNAString(c_asv), type = 'global')
pa <- Biostrings::pairwiseAlignment(pattern = DNAStringSet(asvss), subject = DNAString(asvss[1]), type = 'global')
pid(pa)
nmismatch(pa)
pa <- Biostrings::pairwiseAlignment(pattern = DNAStringSet(asvss), subject = DNAString(asvss[2]), type = 'global')
nmismatch(pa)
rm(list = ls())
library(shiny)
#library(shinyTime)
library(shinyFiles)
library(lubridate)
library(rdrop2)
library(cm.analysis)
library(ggtree)
library(treeio)
library(ape)
library(Biostrings)
library(gridExtra)
# library(ggrepel)
library(tidyverse)
# - Tab01_01 load data =======
rv <- list()
selected_folder <- "~/Boxcryptor/Dropbox (CM)/Main/studies/kijpil/input"
files_in_folder <- list.files(selected_folder)
if(!all(c(sum(str_detect(files_in_folder, "asv_counts.rds")), sum(str_detect(files_in_folder, "asv_lookup.rds")),
sum(str_detect(files_in_folder, "asv_taxonomy.rds")), sum(str_detect(files_in_folder, "asv_alignment.align"))) == 1)){
rv$raw_data_list <- NULL
rv$infoText <- "Could not find exactly one asv_counts.rds, asv_lookup.rds, asv_taxonomy.rds, and asv_alignment.aling file in the selected folder. No data loaded, check folder."
} else {
count_table_file <- files_in_folder[str_detect(files_in_folder, "asv_counts.rds")]
asv_lookup_file <- files_in_folder[str_detect(files_in_folder, "asv_lookup.rds")]
asv_taxonomy_file <- files_in_folder[str_detect(files_in_folder, "asv_taxonomy.rds")]
asv_alignment_file <- files_in_folder[str_detect(files_in_folder, "asv_alignment.align")]
file_list <- list(count_table_file, asv_lookup_file, asv_taxonomy_file, asv_alignment_file)
raw_data_list <- lapply(file_list[1:3], function(c_file){
cm.read_data(file.path(selected_folder, c_file))
})
raw_data_list[[4]] <- seqinr::read.alignment(file.path(selected_folder, asv_alignment_file), format = "fasta")
names(raw_data_list) <- c("count_table", "asv_lookup", "asv_taxonomy", "asv_alignment")
# - if improvement_list is present load it also -
if (sum(str_detect(files_in_folder, "asv_taxonomy_improvement_list.rds")) == 1){
asv_taxonomy_improvement_list_file <- files_in_folder[str_detect(files_in_folder, "asv_taxonomy_improvement_list.rds")]
file_list[["taxonomy_improvement_list"]] <- asv_taxonomy_improvement_list_file
raw_data_list[["taxonomy_improvement_list"]] <- cm.read_data(file.path(selected_folder, asv_taxonomy_improvement_list_file))
} else {
raw_data_list[["taxonomy_improvement_list"]] <- NULL
}
# --
rv$raw_data_list <- raw_data_list
# - add a check to issue big warning if n_asvs do not fit -
n_asv_ct <- ncol(raw_data_list[["count_table"]])
n_asv_lu <- nrow(raw_data_list[["asv_lookup"]])
n_asv_tax <- nrow(raw_data_list[["asv_taxonomy"]][[1]])
n_asv_alignment <- raw_data_list[["asv_alignment"]]$nb
if (!is.null(raw_data_list[["taxonomy_improvement_list"]])){
n_asv_il <- length(raw_data_list[["taxonomy_improvement_list"]][["taxa_options"]])
} else {
n_asv_il <- NULL
}
asv_numbers <- c(n_asv_ct, n_asv_lu, n_asv_tax, n_asv_alignment, n_asv_il)
names(asv_numbers) <- names(raw_data_list)
if (length(unique(asv_numbers)) != 1){
c_warning <- paste(". Warning: files had different numbers of asvs which will cause problems. Specifically", paste(names(asv_numbers), asv_numbers, collapse = ", "), sep = " ")
} else {
c_warning <- paste('. Number of asvs =', unique(asv_numbers))
}
# --
rv$infoText <- paste0("Loaded the files: ", paste0(unlist(file_list), collapse = ", "), c_warning)
}
# --
# --
# - Tab01_02 calc_asv_groups ===========
input <- list()
input$max_mismatch <- 5
input$group_type <- "exclusive"
asv_lookup <- rv$raw_data_list[["asv_lookup"]]
asvs <- asv_lookup$sequence
asv_names <- asv_lookup$ASV
asv_alignment <- rv$raw_data_list[["asv_alignment"]]
# - then calculate distances from alignment, then pid_matrix, then n_mismatch matrix -
asv_alignment_dist <- seqinr::dist.alignment(asv_alignment)
#NB: ? see seqinr::dist.alignment for good infos
asv_alignment_dist_matrix <- as.matrix(asv_alignment_dist)
# -- order as asvs not as alignment --
asv_alignment_dist_matrix <- asv_alignment_dist_matrix[asv_names, asv_names]
# -- --
pid_matrix <- 100*(1-asv_alignment_dist_matrix^2)
nchars <- nchar(asvs)
max_length_matrix <- sapply(1:length(asvs), function(i){
x <- nchars
x[nchars[i] > x] <- nchars[i]
x
})
n_mismatch_matrix <- max_length_matrix * (1-pid_matrix/100)
View(n_mismatch_matrix)
mati <- n_mismatch_matrix[c("ASV_002", "ASV_011", "ASV_027")]
mati <- n_mismatch_matrix[c("ASV_002", "ASV_011", "ASV_027"), c("ASV_002", "ASV_011", "ASV_027")]
View(mati)
names(raw_data_list)
taxi <- raw_data_list[["asv_taxonomy"]]
ft <- taxi[[2]]
View(ft)
dplyr::count(ft, genus)
ft
ft <- dplyr::filter(ft, genus == "Burkholderia")
# --
# - Then calculate the groups from the n_mismatch_matrix -
max_mismatch <- input$max_mismatch
n_mismatch_matrix_bin <- n_mismatch_matrix <= max_mismatch
group_list <- apply(n_mismatch_matrix_bin, 1, function(x){
colnames(n_mismatch_matrix_bin)[x]
})
names(group_list) <- asv_names
group_list <- group_list[sapply(group_list, length) > 1]
# make it unique, i.e. remove entries with identical groups -
group_list <- group_list[!duplicated(group_list)]
# also remove groups that are completely included in other groups
included_in_other_group <- sapply(1:length(group_list), function(i){
any(sapply(group_list[-i], function(c_group){
all(group_list[[i]] %in% c_group)
}))
})
group_list <- group_list[!included_in_other_group]
# if requested, connect groups with members that are less than max_mismatch apart:
if (input$group_type == "connected"){
#group_list_exclusive <- group_list # to save also those where all members are very close to each other
if (length(unlist(group_list)) != length(unique(unlist(group_list)))) { # meaning some ASVs are still in serveral groups
while (length(unlist(group_list)) != length(unique(unlist(group_list)))){
# -- find ASVs that are in several groups --
multi_group_asvs <- names(table(unlist(group_list))[table(unlist(group_list)) > 1])
# -- --
# -- find the group the first multi_group_asv is in  --
in_group <- which(sapply(group_list, function(c_list){multi_group_asvs[1] %in% c_list}))
# --
# - get the union group and replace with old groups -
union_group <- sort(Reduce(f = "union", group_list[in_group]))
group_list[[in_group[1]]] <- union_group
group_list <- group_list[-in_group[-1]]
names(group_list) <- sapply(group_list, `[[`, 1) # name here by first ASV even though not necessary the center
# --
}
}
}
group_list <- group_list[sort(names(group_list))]
# --
# - Calculate the count correlation plots for the groups -
count_table <- rv$raw_data_list[["count_table"]]
group_counts_plots <- lapply(group_list, function(c_group){
#print(c_group)
# - this should probably be linked to a warning and is only done because you might use the app after removal of some ASVs from count table -
c_group <- c_group[c_group %in% colnames(count_table)]
# --
plot_data <- as.data.frame(count_table[, c_group, drop = FALSE]) %>% rownames_to_column("sample_name") # %>% cm.add_metadata(meta, join_column = "amplicon_file")
# - filter out samples in which all asvs are 0 -
not_all_zero <- apply(dplyr::select(plot_data, all_of(c_group)), 1, function(x){any(x > 0)})
plot_data <- dplyr::filter(plot_data, not_all_zero)
# --
plot_data <- pivot_longer(plot_data, cols = all_of(c_group), names_to = "ASV", values_to = "counts")
Tr <- ggplot(plot_data, aes(x = sample_name, y = counts))
Tr <- Tr +
geom_line(aes(group = ASV, col = ASV)) +
geom_point(aes(col = ASV)) +
scale_y_log10() +
theme_cowplot(8) +
xlab("") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
Tr
})
asv_tax <- rv$raw_data_list[["asv_taxonomy"]]
main_taxes <- asv_tax$Tax
main_taxes <- main_taxes %>% rownames_to_column("ASV")
full_tax <- asv_tax$FullTax
ra_table <- cm.relative_abundance(count_table)
group_tree_plots <- lapply(group_list, function(c_group){
# print(c_group)
# filter distances
c_dist_matrix <- asv_alignment_dist_matrix[c_group, c_group]
c_dist <- as.dist(c_dist_matrix)
# calculate tree
#c_tree <- ape::nj(c_dist)
c_tree <- phangorn::midpoint(phangorn::upgma(c_dist))
# -- use treeio package for better plotting --
c_tree_treeio <- as.treedata(c_tree)#new("treedata", phylo = c_tree)
# you need to add @data for the plot
c_n_nodes <- getNodeNum(c_tree_treeio) # tips plus internal nodes
c_n_internal_nodes <- Nnode(c_tree_treeio, internal.only = TRUE) #only the internal
# generate data slot
original_tip_labels <- c_tree_treeio@phylo$tip.label
# new_tip_labels <- main_taxes[match(c_tree_treeio@phylo$tip.label, main_taxes$ASV),]
# new_tip_labels <- apply(dplyr::select(new_tip_labels, ASV, MainTax), 1, function(x){paste(x, collapse = ": ")})
# c_tree_treeio@phylo$tip.label <- new_tip_labels
node_data <- tibble(node = 1:c_n_nodes, node_names = c(c_tree_treeio@phylo$tip.label, rep(NA, c_n_internal_nodes)))
c_ra_sums <- colSums(ra_table[, original_tip_labels])
c_ra_max <- apply(ra_table[, original_tip_labels], 2, max)
node_data$ra_sums <- c(c_ra_sums, rep(NA, c_n_internal_nodes))
node_data$ra_max <- c(c_ra_max, rep(NA, c_n_internal_nodes))
node_data$Size <- 5*node_data$ra_max/max(node_data$ra_max, na.rm = TRUE)
node_data$main_tax <- c(main_taxes$MainTax[match(original_tip_labels, main_taxes$ASV)], rep(NA, c_n_internal_nodes))
node_data$annotation_level <- c(main_taxes$Level[match(original_tip_labels, main_taxes$ASV)], rep(NA, c_n_internal_nodes))
c_tree_treeio@data <- node_data
# print(c_group)
Tr <- ggtree(c_tree_treeio) +
geom_label(aes(x = branch, label = node_names), fill = "lightgray") +
#ggtree::geom_tiplab() + # caused surprising issue
geom_tippoint(aes(size = Size, col = main_tax)) +
guides(size = "none") +
# theme_cowplot(8) +
#ggplot2::xlim(0, 0.06) +
theme(legend.title = element_blank(),
legend.position = "top")
Tr
})
c_group <- group_list[[2]]
c_group
#print(c_group)
c_mmm <- n_mismatch_matrix[c_group, c_group]
View(c_mmm)
c_mm_df <- as.data.frame(c_mmm)
View(c_mm_df)
c_mm_df <- c_mm_df %>% rownames_to_column("ASV")
c_mm_df <- merge(c_mm_df, main_taxes, by = "ASV")
c_mm_df$ra_sum <- colSums(ra_table[, c_mm_df$ASV])
c_mm_df$ra_max <- apply(ra_table[, c_mm_df$ASV], 2, max)
View(c_mm_df)
c_df <- c_mm_df
View(c_df)
str(c_df)
c_df[sapply(c_df, is.numeric) & str_detect(colnames(c_df), "^ASV_")]
c_df[sapply(c_df, is.numeric) & str_detect(colnames(c_df), "^ASV_")] <- lapply(c_df[sapply(c_df, is.numeric) & str_detect(colnames(c_df), "^ASV_")], as.integer)
View(c_df)
?as.integer
as.integer(4)
c_df <- c_mm_df
str(c_df)
c_df$ASV_002
as.integer(c_df$ASV_002)
as.character(as.integer(c_df$ASV_002))
as.character(c_df$ASV_002)
round(c_df$ASV_002)
n_mismatch_matrix[1:5, 1:5]
runApp('~/shiny_apps/asv_check/app_asv_check.R')
runApp('~/shiny_apps/asv_check/app_asv_check.R')
