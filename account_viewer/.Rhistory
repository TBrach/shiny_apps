Primer806R_T_C_T <- "GGACTACTCGGGTTTCTAAT"
Primer806R_C_G_T <- "GGACTACCGGGGTTTCTAAT"
Primer806R_A_G_T <- "GGACTACAGGGGTTTCTAAT"
Primer806R_T_G_T <- "GGACTACTGGGGTTTCTAAT"
ForwardPrimer <- c(Primer515F_A = Primer515F_A, Primer515F_C = Primer515F_C)
ReversePrimer <- c(Primer806R_C_A_A = Primer806R_C_A_A, Primer806R_A_A_A = Primer806R_A_A_A, Primer806R_T_A_A = Primer806R_T_A_A,
Primer806R_C_C_A = Primer806R_C_C_A, Primer806R_A_C_A = Primer806R_A_C_A, Primer806R_T_C_A = Primer806R_T_C_A,
Primer806R_C_G_A = Primer806R_C_G_A, Primer806R_A_G_A = Primer806R_A_G_A, Primer806R_T_G_A = Primer806R_T_G_A,
Primer806R_C_A_T = Primer806R_C_A_T, Primer806R_A_A_T = Primer806R_A_A_T, Primer806R_T_A_T = Primer806R_T_A_T,
Primer806R_C_C_T = Primer806R_C_C_T, Primer806R_A_C_T = Primer806R_A_C_T, Primer806R_T_C_T = Primer806R_T_C_T,
Primer806R_C_G_T = Primer806R_C_G_T, Primer806R_A_G_T = Primer806R_A_G_T, Primer806R_T_G_T = Primer806R_T_G_T)
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Alistipes"
selectedSpecies <- c("Alistipes putredinis", "Alistipes finegoldii", "Alistipes onderdonkii", "Alistipes shahii", "Alistipes obesi")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
paste(fastaFile_selectedSpecies[1])
fastaFile_selectedSpecies[2]
paste(fastaFile_selectedSpecies[2])
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Prevotella"
selectedSpecies <- c("Prevotella copri", "Prevotella corporis", "Prevotella buccalis",
"Prevotella xylaniphila")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
paste(fastaFile_selectedSpecies[1])
paste(fastaFile_selectedSpecies[2])
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
# - make a save rdp_DF -
NameList <- strsplit(names(fastaFile_selectedSpecies_Amplicons), split = " ")
rdp_ids <- lapply(NameList, `[`, 1) %>% unlist()
rdp_species <- lapply(NameList, function(listi){listi[2:length(listi)]})
rdp_species <- sapply(rdp_species, function(charvec){paste(charvec, collapse = " ")}) # takes surprisingly long
rdp_DF_Amplicons <- data.frame(ID = rdp_ids, Species = rdp_species)
rdp_DF_Amplicons[] <- lapply(rdp_DF_Amplicons, as.character)
rdp_DF_Amplicons$Width <- width(fastaFile_selectedSpecies_Amplicons)
rdp_DF_Amplicons <- cbind(rdp_DF_Amplicons, Sequence = fastaFile_selectedSpecies_Amplicons)
View(rdp_DF_Amplicons)
paste(fastaFile_selectedSpecies[4])
paste(fastaFile_selectedSpecies[3])
View(rdp_DF_selectedSpecies)
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Escherichia"
paste(fastaFile_selectedSpecies[3])
selectedSpecies <- c("Escherichia coli", "Escherichia fergusonii", "Escherichia flexneri")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
View(rdp_DF_selectedSpecies)
fastaFile_selectedSpecies[2]
paste(fastaFile_selectedSpecies[2])
length(fastaFile_selectedSpecies)
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
View(usedPrimer)
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
View(usedPrimer)
fastaFile_selectedSpecies_Amplicons[1]
fastaFile_selectedSpecies_Amplicons[1] %in% c("A", "C", "T", "G")
# - find relevant sequences for selected species and remove duplicates and sequences < 1200 bp -
saveGenus <- "Escherichia"
selectedSpecies <- c("Escherichia coli", "Escherichia fergusonii", "Escherichia flexneri")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]]
fastaFile_selectedSpecies <- RL[[2]]
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[1]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[2]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[3]))
grepl("N", paste(fastaFile_selectedSpecies_Amplicons[4]))
?grepl
selectedSpecies <- c("Escherichia coli")
RL <- find_sequences_of_given_species(selected_species = selectedSpecies, rdp_DF = rdp_DF, fastaFile = fastaFile)
rdp_DF_selectedSpecies <- RL[[1]]
fastaFile_selectedSpecies <- RL[[2]]
# - get the V4 amplicons and primer -
ResultList <- collect_V4_amplicons(DNA_string_set = fastaFile_selectedSpecies, Fprimer = ForwardPrimer, Rprimer = ReversePrimer)
fastaFile_selectedSpecies_Amplicons <- ResultList[[1]]
usedPrimer <- ResultList[[2]]
# only keep successful Amplicons
successfulAmplicons <- !width(fastaFile_selectedSpecies_Amplicons) >= 1200
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
for (i in 1:100) {}
for (i in 1:100){
print(grepl("N", paste(fastaFile_selectedSpecies_Amplicons[i])))
}
grepl("N", fastaFile_selectedSpecies_Amplicons)
# - because there are so many kick out more -
# the ones that contain "N"
successfulAmplicons <- !grepl("N", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
successfulAmplicons <- !grepl("V", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("M", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("R", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons
successfulAmplicons <- !grepl("R", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("W", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("S", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("Y", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("Y", fastaFile_selectedSpecies_Amplicons)
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
IUPAC_CODE_MAP
successfulAmplicons <- !grepl("K", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("V", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("H", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("D", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("B", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
successfulAmplicons <- !grepl("N", fastaFile_selectedSpecies_Amplicons)
all(successfulAmplicons)
width(fastaFile_selectedSpecies_Amplicons)
# since still so many I only keep those with length = 292
successfulAmplicons <- width(fastaFile_selectedSpecies_Amplicons) == 292
successfulAmplicons
fastaFile_selectedSpecies_Amplicons <- fastaFile_selectedSpecies_Amplicons[successfulAmplicons]
usedPrimer <- usedPrimer[successfulAmplicons, ]
# - make a save rdp_DF -
NameList <- strsplit(names(fastaFile_selectedSpecies_Amplicons), split = " ")
rdp_ids <- lapply(NameList, `[`, 1) %>% unlist()
rdp_species <- lapply(NameList, function(listi){listi[2:length(listi)]})
rdp_species <- sapply(rdp_species, function(charvec){paste(charvec, collapse = " ")}) # takes surprisingly long
rdp_DF_Amplicons <- data.frame(ID = rdp_ids, Species = rdp_species)
rdp_DF_Amplicons[] <- lapply(rdp_DF_Amplicons, as.character)
rdp_DF_Amplicons$Width <- width(fastaFile_selectedSpecies_Amplicons)
rdp_DF_Amplicons <- cbind(rdp_DF_Amplicons, Sequence = fastaFile_selectedSpecies_Amplicons)
View(rdp_DF_selectedSpecies)
saveRDS(object = list(rdp_DF_Amplicons = rdp_DF_Amplicons, usedPrimer = usedPrimer), file = file.path(datapath,paste(saveGenus, "_DF_primer.rds", sep = "")))
writeXStringSet(fastaFile_selectedSpecies_Amplicons, filepath = file.path(datapath, paste(saveGenus, "_Amplicons.fa", sep = "")))
View(rdp_DF_Amplicons)
rdp_DF_Amplicons$Sequence[1]
fastaFile_selectedSpecies[1]
paste(fastaFile_selectedSpecies[1])
IUPAC_CODE_MAP
View(usedPrimer)
rm(list = ls())
shiny::runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Ibenerary2')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Ibenerary2')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Ibenerary2')
rm(list = ls())
version
library(phyloseq)
update.packages()
update.packages(ask = FALSE)
library(tidyr)
install.packages("tidyr")
install.packages("viridis")
install.packages("pheatmap")
install.packages("grid")
install.packages("RColorBrewer")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("lubridate")
install.packages("gridExtra")
library(tidyr)
library(dplyr)
library(viridis)
# library(rdrop2)
#library(xtable)
library(pheatmap)
#library(grid)
library(gridExtra)
library(RColorBrewer)
library(ggpubr)
library(ggplot2)
library(shiny)
install.packages("shiny")
library(shiny)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(vegan)
library(DESeq2)
biocLite("DESeq2")
library(DESeq2)
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Teaching_Microbiome/appCM.R')
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Teaching_Microbiome/appCM.R')
library(shiny); runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Teaching_Microbiome/appCM.R')
getOption("repos")
index <- function(url, type = "source", filters = NULL, head = 5, cols = c("Package", "Version")) {
contribUrl <- contrib.url(url, type = type)
p <- available.packages(contribUrl, type = type, filters = filters)
p[1:head, cols]
}
CRAN <- "http://cran.r-project.org"
index(CRAN)
bioc <- local({
env <- new.env()
on.exit(rm(env))
evalq(source("http://bioconductor.org/biocLite.R", local = TRUE), env)
biocinstallRepos()
})
bioc
bioc[grep("BioC", names(bioc))]
index(bioc["BioCsoft"])
# A sample .Rprofile file with two different package repositories.
local({
r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
r["BioCsoft"] <- "https://bioconductor.org/packages/3.7/bioc"
r["BioCann"] <- "https://bioconductor.org/packages/3.7/data/annotation"
r["BioCexp"] <- "https://bioconductor.org/packages/3.7/data/experiment"
r["BioCworkflows"] <- "https://bioconductor.org/packages/3.7/workflows"
options(repos = r)
})
getOption("repos")
library(phyloseq)
library(vegan)
library(DESeq2)
library(ggplot2)
library(shiny)
library(lubridate)
library(tidyr)
library(dplyr)
library(viridis)
# library(rdrop2)
#library(xtable)
library(pheatmap)
# library(grid)
library(gridExtra)
library(RColorBrewer)
library(ggpubr)
getOption("repos")
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Teaching_Microbiome/appCM.R')
#Assign taxonomy IDTAXA
library(DECIPHER)
packageVersion("DECIPHER")
library(dada2)
# specify the path to the FASTA file (in quotes)
#load seqtab
load("/Users/jvb740/Downloads/Camila/DenoisedData.RData")
dna <- DNAStringSet(getSequences(seqtab.nochim))
seqs <-DNAStringSet(getSequences(seqtab.nochim))
load("/Users/jvb740/Downloads/Camila/Warcup_v2_March2018.RData")
rm(list = ls())
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
q()
rm(list = ls())
rm(list = ls())
library(shiny); runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/app_accountViewer2.R')
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/"
basename(datapath)
df_in <- read.csv2(file = file.path(datapath, "FaellesKonto.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/"
df_in <- read.csv2(file = file.path(datapath, "FaellesKonto.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/"
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer"
df_in <- read.csv2(file = file.path(datapath, "FaellesKonto.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/Handelsbanken"
df_in <- read.csv2(file = file.path(datapath, "FaellesKonto.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Text", "Saldo", "Amount"), colnames(df_in))
colIndexes
colIndexes <- colIndexes[!is.na(colIndexes)]
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$Text <- as.character(df_in$Text)
df_in$Saldo <- as.numeric(df_in$Saldo)
df_in$Amount <- as.numeric(df_in$Amount)
if (df_in$Date[1] > df_in$Date[nrow(df_in)]) {
df_in <- df_in[nrow(df_in):1,] # I just like to have the oldest value on top, also for following Amount check
}
# - new thing the account name for multiple account version -
account_name <- basename(file.path(datapath, "FaellesKonto.csv"))
account_name
strsplit(x = account_name, pattern = ".csv")
strsplit(x = account_name, split = ".csv")
strsplit(x = account_name, split = ".csv")[[1]][1]
if (!all.equal(df_in$Amount[2:nrow(df_in)], diff(df_in$Saldo))) {
warning("!!!!!!!your Amounts did not fit to your Saldo's, this was corrected here but you should check it in your csv!!!! ")
df_in$Amount[2:nrow(df_in)] <- diff(df_in$Saldo)
}
rv <- list()
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/Handelsbanken"
df_in <- read.csv2(file = file.path(datapath, "FaellesKonto.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
colIndexes <- match(c("Date", "Text", "Saldo", "Amount"), colnames(df_in))
colIndexes <- colIndexes[!is.na(colIndexes)]
df_in <- df_in[, colIndexes]
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$Text <- as.character(df_in$Text)
df_in$Saldo <- as.numeric(df_in$Saldo)
df_in$Amount <- as.numeric(df_in$Amount)
if (df_in$Date[1] > df_in$Date[nrow(df_in)]) {
df_in <- df_in[nrow(df_in):1,] # I just like to have the oldest value on top, also for following Amount check
}
if (!all.equal(df_in$Amount[2:nrow(df_in)], diff(df_in$Saldo))) {
warning("!!!!!!!your Amounts did not fit to your Saldo's, this was corrected here but you should check it in your csv!!!! ")
df_in$Amount[2:nrow(df_in)] <- diff(df_in$Saldo)
}
# - new thing the account name for multiple account version -
account_name <- basename(file.path(datapath, "FaellesKonto.csv"))
account_name <- strsplit(x = account_name, split = ".csv")[[1]][1]
# --
df_in$Account <- account_name
rv$DFa <- df_in
View(df_in)
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/app_accountViewer2.R')
account_list <- list()
account_list[[1]] <- df_in
names(account_list)[1] <- account_name
names(account_list)
account_name == names(account_list)
account_list[[2]] <- df_in
names(account_list)[2] <- "frityz"
index <- which(account_name == names(account_list))
index
account_list
sapply(account_list, function(df){min(df$Date)})
df_in$Date
min(df_in$Date)
account_list[[1]]$Date
sapply(1:length(account_list), function(i){ min(account_list[[i]]$Date)})
lapply(1:length(account_list), function(i){ min(account_list[[i]]$Date)})
class(unlist(account_list))
# -- set the date inputs based on the min and max values in the account_list --
minDate <- lapply(1:length(account_list), function(i){ min(account_list[[i]]$Date)
updateDateInput(session, inputId = "startDate", value = as.character(min(df_in$Date)))
updateDateInput(session, inputId = "endDate", value = as.character(max(df_in$Date)))
# ----
rv$DFa <- df_in
rv$infoText <- paste("Uploaded suitable account csv with ", nrow(rv$DFa), " entries covering ", rv$DFa$Date[1], " to ", rv$DFa$Date[nrow(rv$DFa)], ". You can plot now", sep = "")
})
# -- set the date inputs based on the min and max values in the account_list --
minDate <- lapply(1:length(account_list), function(i){ min(account_list[[i]]$Date)
updateDateInput(session, inputId = "startDate", value = as.character(min(df_in$Date)))
updateDateInput(session, inputId = "endDate", value = as.character(max(df_in$Date)))
# ----
rv$DFa <- df_in
rv$infoText <- paste("Uploaded suitable account csv with ", nrow(rv$DFa), " entries covering ", rv$DFa$Date[1], " to ", rv$DFa$Date[nrow(rv$DFa)], ". You can plot now", sep = "")
})
# -- set the date inputs based on the min and max values in the account_list --
minDate <- lapply(1:length(account_list), function(i){min(account_list[[i]]$Date)})
minDate
min(minDate)
# -- set the date inputs based on the min and max values in the account_list --
minDate <- lapply(1:length(account_list), function(i){min(account_list[[i]]$Date)})
minDate
unlist(minDate)
do.call("sapply", minDate)
do.call("min", minDate)
minDate[[2]]
minDate[[2]] <- minDate[[2]] - days(1)
minDate
do.call("min", minDate)
maxDate <- lapply(1:length(account_list), function(i){max(account_list[[i]]$Date)})
maxDate <- do.call("max", maxDate)
maxDate
as.character(minDate)
minDate
minDate <- do.call("min", minDate)
as.character(minDate)
df_out <- do.call("rbind", account_list)
View(df_out)
df_out <- dplyr::arrange(df_out, Date)
View(df_out)
df_out <- dplyr::arrange(df_out, desc(Date))
1:1
length(account_list)
Names <- names(account_list)
Names
minData <- lapply(1:length(account_list), function(i){min(account_list[[i]]$Date)})
minData
minDates <- lapply(1:length(account_list), function(i){min(account_list[[i]]$Date)})
minDates
do.call("as.character", minDates)
minDates
do.call("min", minDates)
do.call("I", minDates)
minDates <- lapply(1:length(account_list), function(i){as.character(min(account_list[[i]]$Date))})
minDates
unlist(minDates)
class(unlist(minDates))
minDates <- unlist(lapply(1:length(account_list), function(i){as.character(min(account_list[[i]]$Date))}))
minDates
maxDates <- unlist(lapply(1:length(account_list), function(i){as.character(max(account_list[[i]]$Date))}))
maxDates
Entries <- unlist(lapply(account_list, "nrow"))
Entries
colnames(df_in)
head(df_in)
minAmount <- unlist(lapply(1:length(account_list), function(i){as.character(min(account_list[[i]]$Saldo))}))
minAmount
maxAmount
maxDates <- unlist(lapply(1:length(account_list), function(i){as.character(max(account_list[[i]]$Date))}))
Entries <- unlist(lapply(account_list, "nrow"))
minAmount <- unlist(lapply(1:length(account_list), function(i){as.character(min(account_list[[i]]$Saldo))}))
maxAmount <- unlist(lapply(1:length(account_list), function(i){as.character(max(account_list[[i]]$Saldo))}))
maxAmount
DF <- data.frame(Index = Indexes, Name = Names, minDate = minDates, maxDate = maxDates, NoEntries = Entries,
minAmount = minAmount, maxAmount = maxAmount)
Indexes <- 1:length(account_list)
Names <- names(account_list)
minDates <- unlist(lapply(1:length(account_list), function(i){as.character(min(account_list[[i]]$Date))}))
maxDates <- unlist(lapply(1:length(account_list), function(i){as.character(max(account_list[[i]]$Date))}))
Entries <- unlist(lapply(account_list, "nrow"))
minAmount <- unlist(lapply(1:length(account_list), function(i){as.character(min(account_list[[i]]$Saldo))}))
maxAmount <- unlist(lapply(1:length(account_list), function(i){as.character(max(account_list[[i]]$Saldo))}))
DF <- data.frame(Index = Indexes, Name = Names, minDate = minDates, maxDate = maxDates, NoEntries = Entries,
minAmount = minAmount, maxAmount = maxAmount)
View(DF)
runApp('Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/app_accountViewer2.R')
head(df_out)
account_list[[2]]$Saldo <- account_list[[2]]$Saldo + 1000
account_list[[2]]$Account <- "fritz"
df_out <- do.call("rbind", account_list)
df_out <- dplyr::arrange(df_out, desc(Date))
DFaPlot <- df_out
rm(list = ls())
setwd("~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer_Combined")
rm(list = ls())
library(shiny); runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
datapath <- "/Users/jvb740/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/AccountViewer/IngDiba"
df_in <- read.csv2(file = file.path(datapath, "IngDiba_Extra.csv"), sep = ";", header = TRUE, stringsAsFactors = FALSE)
View(df_in)
runApp('app_accountViewer2.R')
requiredColumns = c("Date", "Text", "Amount", "Saldo", "Currency")
colIndexes <- match(requiredColumns, colnames(df_in))
colIndexes
colIndexes <- colIndexes[!is.na(colIndexes)]
if (length(colIndexes) != 5){
return(paste("Loaded csv did not contain the required columns: ", requiredColumns, ". Please adjust your csv file.", sep = ""))
}
df_in <- df_in[, colIndexes]
# -- set classes of the 5 columns in df_in and perform tests --
if(any(is.na(lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")))){
return("Could not parse all Dates, must be in day month year format!")
}
df_in$Date <- lubridate::parse_date_time(df_in$Date, orders = "dmy", tz = "CET")
df_in$Text <- as.character(df_in$Text)
if(any(is.na(as.numeric(df_in$Saldo)))){
return("Could not parse all Saldo entries to numeric numbers, make sure they only contain commas as delimiter. Correct and load csv again.")
}
df_in$Saldo <- as.numeric(df_in$Saldo)
if(any(is.na(as.numeric(df_in$Amount)))){
return("Could not parse all Amount entries to numeric numbers, make sure they only contain commas as delimiter. Correct and load csv again.")
}
df_in$Amount <- as.numeric(df_in$Amount)
df_in$Currency <- as.character(df_in$Currency)
if (df_in$Date[1] > df_in$Date[nrow(df_in)]) {
df_in <- df_in[nrow(df_in):1,] # make sure oldest is on top for following Amount check
}
df_in
View(df_in)
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
?ggplotly
runApp('app_accountViewer2.R')
?plotlyOutput
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
runApp('app_accountViewer2.R')
runApp('app_acView.R')
rm(list = ls())
