# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# ----
# --
# -- load melting curves --
MCurve <- read.table(file = file.path(datapath, "20180830_TMCurve2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE)
MCurve_list <- transform_FandMCurve(MCurve, ExpcolSplit = ExpcolSplit, FirstColumn = "Temperature")
# --
# - load Tm values --
TMs <- read.table(file = file.path(datapath, "20180830_TMValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
TMs_list <- transform_TMvalues(TMs, ExpcolSplit = ExpcolSplit)
# --
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
# SampleRows <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
# names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
PersonRows <- c("T", "T", "E", "E", "T", "T", "E", "E", "E")
names(PersonRows) <- c("A", "C", "E", "G","I", "K", "M","O","P")
RepeatColumns <- rep(c("1", "2"), 4)
names(RepeatColumns) <- c(1:2, 3:4, 5:6, 7:8)
# ----
# -- assign the colors and factor orders --
person_colors <- c(cbPalette[2], cbPalette[4])
names(person_colors) <- c("E", "T")
target_colors <- c(cbPalette[4:7])
names(target_colors) <- c("Bacteroides", "Faecalibacterium", "Alistipes", "Escherichia")
sample_colors <- QuantColors15[1:9]
names(sample_colors) <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
conc_colors <- cbPalette[8:1]
names(conc_colors) <- c(0.064/2^(0:6), 0)
# ----
# --
# - plot Cp values -
CPs <- CPs_list[["Exp"]]
CPsKeep <- CPs
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
View(CPs)
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
CPs <- CPsKeep
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
CPs$Sample_Type
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
function_path <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/qPCR_Analysis_Functions"
source(file.path(function_path, "qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/180830_HugeQPCR"
# - load all fluorescence curves -
FCurve <- read.table(file = file.path(datapath, "20180830_FCurve_.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE)
# -- split fluorescence curves into experiment and standard curve and transform to long data frame --
ExpcolSplit <- rep(c("Exp"), each = 8)
names(ExpcolSplit) <- c(1:2, 3:4, 5:6, 7:8)
FCurve_list <- transform_FandMCurve(FCurve, ExpcolSplit = ExpcolSplit, FirstColumn = "Cycle")
# ----
# --
# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# ----
# --
# -- load melting curves --
MCurve <- read.table(file = file.path(datapath, "20180830_TMCurve2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE)
MCurve_list <- transform_FandMCurve(MCurve, ExpcolSplit = ExpcolSplit, FirstColumn = "Temperature")
# --
# - load Tm values --
TMs <- read.table(file = file.path(datapath, "20180830_TMValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
TMs_list <- transform_TMvalues(TMs, ExpcolSplit = ExpcolSplit)
# --
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
# SampleRows <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
# names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
PersonRows <- c("T", "T", "E", "E", "T", "T", "E", "E", "E")
names(PersonRows) <- c("A", "C", "E", "G","I", "K", "M","O","P")
RepeatColumns <- rep(c("1", "2"), 4)
names(RepeatColumns) <- c(1:2, 3:4, 5:6, 7:8)
# ----
# -- assign the colors and factor orders --
person_colors <- c(cbPalette[2], cbPalette[4])
names(person_colors) <- c("E", "T")
target_colors <- c(cbPalette[4:7])
names(target_colors) <- c("Bacteroides", "Faecalibacterium", "Alistipes", "Escherichia")
sample_colors <- QuantColors15[1:3]
names(sample_colors) <- c("V4", "Fl", "NTC")
conc_colors <- cbPalette[8:1]
names(conc_colors) <- c(0.064/2^(0:6), 0)
# ----
# --
# - plot Cp values -
CPs <- CPs_list[["Exp"]]
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
View(CPs)
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
View(CPs)
colnames(CPs)
deltaCP_Table <- CPs
View(deltaCP_Table)
deltaCP_Table <- dplyr::select(deltaCP_Table, Name, Well:Column, Cp, Exp:NormType)
colnames(deltaCP_Table)
?spread
spread(deltaCP_Table, key = "NormType", value = "Cp")
deltaCP_Table <- tidyr::spread(deltaCP_Table, key = "NormType", value = "Cp")
View(deltaCP_Table)
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
function_path <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/qPCR_Analysis_Functions"
source(file.path(function_path, "qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/180830_HugeQPCR"
# - load all fluorescence curves -
FCurve <- read.table(file = file.path(datapath, "20180830_FCurve_.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE)
# -- split fluorescence curves into experiment and standard curve and transform to long data frame --
ExpcolSplit <- rep(c("Exp"), each = 8)
names(ExpcolSplit) <- c(1:2, 3:4, 5:6, 7:8)
FCurve_list <- transform_FandMCurve(FCurve, ExpcolSplit = ExpcolSplit, FirstColumn = "Cycle")
# ----
# --
# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# ----
# --
# -- load melting curves --
MCurve <- read.table(file = file.path(datapath, "20180830_TMCurve2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE)
MCurve_list <- transform_FandMCurve(MCurve, ExpcolSplit = ExpcolSplit, FirstColumn = "Temperature")
# --
# - load Tm values --
TMs <- read.table(file = file.path(datapath, "20180830_TMValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
TMs_list <- transform_TMvalues(TMs, ExpcolSplit = ExpcolSplit)
# --
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
# SampleRows <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
# names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
PersonRows <- c("T", "T", "E", "E", "T", "T", "E", "E", "E")
names(PersonRows) <- c("A", "C", "E", "G","I", "K", "M","O","P")
RepeatColumns <- rep(c("1", "2"), 4)
names(RepeatColumns) <- c(1:2, 3:4, 5:6, 7:8)
# ----
# -- assign the colors and factor orders --
person_colors <- c(cbPalette[2], cbPalette[4])
names(person_colors) <- c("E", "T")
target_colors <- c(cbPalette[4:7])
names(target_colors) <- c("Bacteroides", "Faecalibacterium", "Alistipes", "Escherichia")
sample_colors <- QuantColors15[1:3]
names(sample_colors) <- c("V4", "Fl", "NTC")
conc_colors <- cbPalette[8:1]
names(conc_colors) <- c(0.064/2^(0:6), 0)
# ----
# --
# - plot Cp values -
CPs <- CPs_list[["Exp"]]
CPsKeep <- CPs
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
deltaCP_Table <- CPs
colnames(deltaCP_Table)
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormType)
deltaCP_Table <- tidyr::spread(deltaCP_Table, key = "NormType", value = "Cp")
CPs <- CPsKeep
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormType)
View(deltaCP_Table)
CPs <- CPsKeep
CPs <- filter(CPs, Row %in% c(A:G))
CPs <- filter(CPs, Row %in% A:G)
A:G
"A":"G"
CPs <- filter(CPs, Row %in% c("A", "C", "E", "G"))
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
# --
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormType)
deltaCP_Table <- tidyr::spread(deltaCP_Table, key = "NormType", value = "Cp")
View(deltaCP_Table)
CPs <- CPsKeep
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
View(CPs)
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormType)
View(deltaCP_Table)
RefTarget <- "Escherichia"
colnames(deltaCP_Table)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
function_path <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/qPCR_Analysis_Functions"
source(file.path(function_path, "qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/180830_HugeQPCR"
ExpcolSplit <- rep(c("Exp"), each = 8)
names(ExpcolSplit) <- c(1:2, 3:4, 5:6, 7:8)
# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
function_path <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/qPCR_Analysis_Functions"
source(file.path(function_path, "qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/180830_HugeQPCR"
ExpcolSplit <- rep(c("Exp"), each = 8)
names(ExpcolSplit) <- c(1:2, 3:4, 5:6, 7:8)
# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# ----
# --
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormMethodRows <- c("DSN", "DSN", "DSN", "DSN","DSN_50", "DSN_50", "DSN_50", "DSN_50", "DSN_50")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
# SampleRows <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
# names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
PersonRows <- c("T", "T", "E", "E", "T", "T", "E", "E", "E")
names(PersonRows) <- c("A", "C", "E", "G","I", "K", "M","O","P")
RepeatColumns <- rep(c("1", "2"), 4)
names(RepeatColumns) <- c(1:2, 3:4, 5:6, 7:8)
# ----
# -- assign the colors and factor orders --
person_colors <- c(cbPalette[2], cbPalette[4])
names(person_colors) <- c("E", "T")
target_colors <- c(cbPalette[4:7])
names(target_colors) <- c("Bacteroides", "Faecalibacterium", "Alistipes", "Escherichia")
sample_colors <- QuantColors15[1:3]
names(sample_colors) <- c("V4", "Fl", "NTC")
conc_colors <- cbPalette[8:1]
names(conc_colors) <- c(0.064/2^(0:6), 0)
# ----
# --
# - plot Cp values -
CPs <- CPs_list[["Exp"]]
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
function_path <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/qPCR_Analysis_Functions"
source(file.path(function_path, "qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/180830_HugeQPCR"
ExpcolSplit <- rep(c("Exp"), each = 8)
names(ExpcolSplit) <- c(1:2, 3:4, 5:6, 7:8)
# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# ----
# --
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormMethodRows <- c("DSN", "DSN", "DSN", "DSN","DSN_50", "DSN_50", "DSN_50", "DSN_50", "DSN_50")
names(NormMethodRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
# SampleRows <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
# names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
PersonRows <- c("T", "T", "E", "E", "T", "T", "E", "E", "E")
names(PersonRows) <- c("A", "C", "E", "G","I", "K", "M","O","P")
RepeatColumns <- rep(c("1", "2"), 4)
names(RepeatColumns) <- c(1:2, 3:4, 5:6, 7:8)
# ----
# -- assign the colors and factor orders --
person_colors <- c(cbPalette[2], cbPalette[4])
names(person_colors) <- c("E", "T")
target_colors <- c(cbPalette[4:7])
names(target_colors) <- c("Bacteroides", "Faecalibacterium", "Alistipes", "Escherichia")
sample_colors <- QuantColors15[1:3]
names(sample_colors) <- c("V4", "Fl", "NTC")
conc_colors <- cbPalette[8:1]
names(conc_colors) <- c(0.064/2^(0:6), 0)
# ----
# --
# - plot Cp values -
CPs <- CPs_list[["Exp"]]
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
CPs$NormMethod <- NormMethodRows[CPs$Row]
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormType)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
RefTarget = "Escherichia"
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
rm(list = ls())
# source("https://bioconductor.org/biocLite.R")
# biocLite("phyloseq")
library(ggplot2); packageVersion("ggplot2")
library(dplyr); packageVersion("dplyr")
library(tidyr); packageVersion("tidyr")
library(gridExtra); packageVersion("gridExtra")
function_path <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/qPCR_Analysis_Functions"
source(file.path(function_path, "qPCRFunctions.R"))
datapath <- "/Users/jvb740/MarieCurie_Work/NormalizationProjectNastya/Protocols/180830_HugeQPCR"
ExpcolSplit <- rep(c("Exp"), each = 8)
names(ExpcolSplit) <- c(1:2, 3:4, 5:6, 7:8)
# - load all CP values in -
CPs <- read.table(file = file.path(datapath, "20180830_CPValues2.txt"), header = TRUE, sep="\t", na.strings = "NA", stringsAsFactors = FALSE, skip = 1)
# -- split CPs into experiment and standard curve --
CPs_list <- transform_CPvalues(CPs, ExpcolSplit = ExpcolSplit)
# ----
# --
# - input of Targets, Samples, Persons, and wished for colors -
# -- assign the rows and columns --
TargetCols <- rep(c("Faecalibacterium", "Alistipes", "Bacteroides", "Escherichia"), each = 2)
names(TargetCols) <- c(1:2, 3:4, 5:6, 7:8)
SampleRows <- c("V4", "V4", "Fl", "FL","V4", "V4", "Fl", "FL", "NC")
names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormalisationRows <- c("Norm", "Control", "Norm", "Control","Norm", "Control", "Norm", "Control", "NC")
names(NormalisationRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
NormMethodRows <- c("DSN", "DSN", "DSN", "DSN","DSN_50", "DSN_50", "DSN_50", "DSN_50", "DSN_50")
names(NormMethodRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
# SampleRows <- c("V4_T", "V4_T_Control", "Fl_E", "FL_E_Control","V4_T_50", "V4_T_Control_50", "Fl_E_50", "FL_E_Control_50", "NTC")
# names(SampleRows) <- c("A", "C", "E", "G", "I", "K", "M","O","P")
PersonRows <- c("T", "T", "E", "E", "T", "T", "E", "E", "E")
names(PersonRows) <- c("A", "C", "E", "G","I", "K", "M","O","P")
RepeatColumns <- rep(c("1", "2"), 4)
names(RepeatColumns) <- c(1:2, 3:4, 5:6, 7:8)
# ----
# -- assign the colors and factor orders --
person_colors <- c(cbPalette[2], cbPalette[4])
names(person_colors) <- c("E", "T")
target_colors <- c(cbPalette[4:7])
names(target_colors) <- c("Bacteroides", "Faecalibacterium", "Alistipes", "Escherichia")
sample_colors <- QuantColors15[1:3]
names(sample_colors) <- c("V4", "Fl", "NTC")
conc_colors <- cbPalette[8:1]
names(conc_colors) <- c(0.064/2^(0:6), 0)
# ----
# --
# - plot Cp values -
CPs <- CPs_list[["Exp"]]
CPsKeep <- CPs
# - assign targets, sample_types, person, and repeat -
CPs$Target <- TargetCols[CPs$Column]
CPs$Target <- factor(CPs$Target, levels = names(target_colors), ordered = T)
CPs$Sample_Type <- SampleRows[CPs$Row]
CPs$Sample_Type <- factor(CPs$Sample_Type, levels = names(sample_colors), ordered = T)
CPs$Person <- PersonRows[CPs$Row]
CPs$Person <- factor(CPs$Person, levels = names(person_colors), ordered = T)
CPs$Repeat <- RepeatColumns[CPs$Column]
CPs$NormType <- NormalisationRows[CPs$Row]
CPs$NormMethod <- NormMethodRows[CPs$Row]
CPs <- filter(CPs, Sample_Type != "NC" & Sample_Type != "NTC")
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormType)
View(deltaCP_Table)
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormMethod)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
RefTarget = "Escherichia"
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
deltaCP_Table <- CPs
View(deltaCP_Table)
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormMethod)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType, NormMethod) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
View(deltaCP_Table_Sum)
deltaCP_Table <- CPs
deltaCP_Table <- dplyr::select(deltaCP_Table, Cp, Exp:NormMethod)
View(deltaCP_Table)
RefTarget
RefTarget <- "Escherichia"
colnames(deltaCP_Table)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType, NormMethod) %>% summarise(DeltaCp = Cp - Cp[Target = RefTarget])
View(deltaCP_Table_Sum)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType, NormMethod) %>% summarise(DeltaCp = Cp)
View(deltaCP_Table_Sum)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType, NormMethod) %>% summarise(DeltaCp = Cp[Target == RefTarget])
deltaCP_Table$Target
RefTarget <- "Escherichia"
colnames(deltaCP_Table)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType, NormMethod) %>% mutate(DeltaCp = Cp - Cp[Target == RefTarget])
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Target, Sample_Type, Repeat, NormType, NormMethod)
deltaCP_Table_Sum <- mutate(deltaCP_Table_Sum, DeltaCp = Cp - Cp[Target == RefTarget])
View(deltaCP_Table_Sum)
deltaCP_Table_Sum
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Sample_Type, Repeat, NormType, NormMethod)
deltaCP_Table_Sum <- mutate(deltaCP_Table_Sum, DeltaCp = Cp - Cp[Target == RefTarget])
View(deltaCP_Table_Sum)
deltaCP_Table <- CPs
colnames(deltaCP_Table)
deltaCP_Table <- dplyr::select(deltaCP_Table, Name, Well, Row, Column, Exp:NormMethod, Cp)
deltaCP_Table_Sum <- group_by(deltaCP_Table, Person, Sample_Type, Repeat, NormType, NormMethod)
deltaCP_Table_Sum <- mutate(deltaCP_Table_Sum, DeltaCp = Cp[Target == RefTarget] - Cp)
View(deltaCP_Table_Sum)
shiny::runApp('~/Coursera_MOOC/20161202_LearningShiny_FantasySports/shinyy/Apps/Shinyappsio/Ibenerary2')
